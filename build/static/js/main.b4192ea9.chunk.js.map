{"version":3,"sources":["components/CreateForm.tsx","components/PreviewForm.tsx","components/MyForms.tsx","App.tsx","index.tsx"],"names":["DeleteIcon","props","_jsx","SvgIcon","_objectSpread","children","d","CreateForm","fields","setFields","useState","newField","setNewField","formName","setFormName","openDialog","setOpenDialog","showPreview","setShowPreview","previewValues","setPreviewValues","evalFormula","useCallback","formula","context","safeContext","helpers","Date","Math","parseInt","parseFloat","calculateAge","birthDate","today","birth","isNaN","getTime","age","getFullYear","monthDiff","getMonth","getDate","evalContext","params","Object","keys","values","Function","concat","func","error","console","updateDerivedFields","newValues","hasChanges","forEach","field","derived","parentFields","hasAllParents","parentId","parentField","find","f","id","label","toLowerCase","replace","computedValue","updateField","updated","prev","map","handlePreviewChange","fieldId","value","_jsxs","Box","p","Typography","variant","gutterBottom","display","gap","alignItems","mb","Select","onChange","e","target","MenuItem","Button","onClick","addField","uuidv4","type","validation","required","options","undefined","includes","length","flex","List","index","_field$defaultValue","_field$options4","currentFieldId","ListItem","width","justifyContent","IconButton","deleteField","filter","TextField","fullWidth","margin","defaultValue","FormControlLabel","control","Checkbox","checked","minLength","Number","size","sx","mr","maxLength","email","password","trim","_field$parentFields","current","helperText","Alert","severity","mt","join","option","optIdx","_field$options5","newOptions","_","i","fontSize","Array","isArray","correctAnswers","push","ans","Radio","correctAnswer","_field$options6","Divider","Paper","elevation","_previewValues$field$","_field$options","_field$options2","_field$options3","disabled","color","multiline","rows","opt","currentValue","newValue","v","renderPreviewField","some","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","saveForm","formSchema","name","createdAt","toISOString","localStorage","setItem","JSON","stringify","alert","PreviewForm","schema","setSchema","setValues","errors","setErrors","submitted","setSubmitted","result","setResult","formId","useParams","useEffect","stored","getItem","parsed","parse","defaults","contextValues","val","currentValues","variableName","updatedValues","validateField","test","handleChange","err","component","flexDirection","onSubmit","preventDefault","newErrors","correct","feedback","fieldValue","userAnswers","every","log","_values$field$id","_errors$field$id","isDisabled","FormHelperText","RadioGroup","MyForms","forms","setForms","history","useHistory","loadedForms","key","startsWith","raw","data","Boolean","_ref","React","Fragment","ListItemButton","encodeURIComponent","handleClick","ListItemText","primary","secondary","toLocaleString","App","Router","Switch","Route","path","Redirect","from","to","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4192ea9.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio, Paper, Alert } from '@mui/material';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { SvgIcon } from '@mui/material';\r\n\r\nconst DeleteIcon = (props: any) => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\r\n    </SvgIcon>\r\n);\r\n\r\ntype FieldType = 'text' | 'number' | 'textarea' | 'select' | 'radio' | 'checkbox' | 'date';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    id: string;\r\n    type: FieldType;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n}\r\n\r\nconst CreateForm: React.FC = () => {\r\n    const [fields, setFields] = useState<Field[]>([]);\r\n    const [newField, setNewField] = useState<FieldType>('text');\r\n    const [formName, setFormName] = useState('');\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [showPreview, setShowPreview] = useState(false);\r\n    const [previewValues, setPreviewValues] = useState<Record<string, any>>({});\r\n    const evalFormula = useCallback((formula: string, context: Record<string, any>) => {\r\n        try {\r\n            const safeContext = { ...context };\r\n\r\n            const helpers = {\r\n                Date: Date,\r\n                Math: Math,\r\n                parseInt: parseInt,\r\n                parseFloat: parseFloat,\r\n                calculateAge: (birthDate: string) => {\r\n                    if (!birthDate) return 0;\r\n                    const today = new Date();\r\n                    const birth = new Date(birthDate);\r\n                    if (isNaN(birth.getTime())) return 0;\r\n\r\n                    let age = today.getFullYear() - birth.getFullYear();\r\n                    const monthDiff = today.getMonth() - birth.getMonth();\r\n\r\n                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n                        age--;\r\n                    }\r\n                    return age;\r\n                }\r\n            };\r\n\r\n            const evalContext = { ...safeContext, ...helpers };\r\n\r\n            const params = Object.keys(evalContext);\r\n            const values = Object.values(evalContext);\r\n\r\n            const func = new Function(...params, `\"use strict\"; return (${formula});`);\r\n            return func(...values);\r\n        } catch (error) {\r\n            console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\r\n            return 'Error';\r\n        }\r\n    }, []);\r\n\r\n    const updateDerivedFields = useCallback((values: Record<string, any>) => {\r\n        const newValues = { ...values };\r\n        let hasChanges = false;\r\n\r\n        fields.forEach(field => {\r\n            if (field.derived && field.parentFields && field.formula) {\r\n                const context: Record<string, any> = {};\r\n                let hasAllParents = true;\r\n\r\n                field.parentFields.forEach(parentId => {\r\n                    const parentField = fields.find(f => f.id === parentId);\r\n                    if (parentField && parentId in values) {\r\n                        context[parentField.label.toLowerCase().replace(/\\s+/g, '_')] = values[parentId];\r\n                    } else {\r\n                        hasAllParents = false;\r\n                    }\r\n                });\r\n\r\n                if (hasAllParents) {\r\n                    const computedValue = evalFormula(field.formula, context);\r\n\r\n                    if (newValues[field.id] !== computedValue) {\r\n                        newValues[field.id] = computedValue;\r\n                        hasChanges = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (hasChanges) {\r\n            setPreviewValues(newValues);\r\n        }\r\n    }, [fields, evalFormula]);\r\n\r\n    const addField = () => {\r\n        const id = uuidv4();\r\n        const field: Field = {\r\n            id,\r\n            type: newField,\r\n            label: '',\r\n            validation: { required: false },\r\n            options: newField === 'select' ? [] : undefined,\r\n        };\r\n\r\n        if (['select', 'radio', 'checkbox'].includes(newField)) {\r\n            field.options = ['Option 1', 'Option 2'];\r\n        }\r\n\r\n        setFields((prev) => [...prev, field]);\r\n    }\r\n\r\n    const updateField = (id: string, updated: Partial<Field>) => {\r\n        setFields((prev) =>\r\n            prev.map((field) => (field.id === id ? { ...field, ...updated } : field))\r\n        );\r\n    };\r\n\r\n    const deleteField = (id: string) => {\r\n        setFields((prev) => prev.filter((field) => field.id !== id));\r\n        setPreviewValues(prev => {\r\n            const newValues = { ...prev };\r\n            delete newValues[id];\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const saveForm = () => {\r\n        const formSchema = {\r\n            name: formName,\r\n            fields,\r\n            createdAt: new Date().toISOString(),\r\n        };\r\n\r\n        localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\r\n        setOpenDialog(false);\r\n        alert('Form saved successfully!');\r\n        setFields([]);\r\n        setFormName('');\r\n        setPreviewValues({});\r\n    };\r\n\r\n    const handlePreviewChange = (fieldId: string, value: any) => {\r\n        const newValues = { ...previewValues, [fieldId]: value };\r\n        setPreviewValues(newValues);\r\n        updateDerivedFields(newValues);\r\n    };\r\n\r\n    const getAvailableParentFields = (currentFieldId: string) => {\r\n        return fields.filter(f => f.id !== currentFieldId && !f.derived && f.label.trim() !== '');\r\n    };\r\n\r\n    const renderPreviewField = (field: Field) => {\r\n        const value = previewValues[field.id] ?? (field.type === 'checkbox' ? [] : '');\r\n\r\n        if (field.derived) {\r\n            return (\r\n                <TextField\r\n                    key={field.id}\r\n                    fullWidth\r\n                    label={`${field.label} (Auto-calculated)`}\r\n                    value={value}\r\n                    disabled\r\n                    margin=\"normal\"\r\n                    sx={{ '& .MuiInputBase-input': { color: 'text.secondary' } }}\r\n                />\r\n            );\r\n        }\r\n\r\n        switch (field.type) {\r\n            case 'text':\r\n            case 'number':\r\n            case 'date':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        type={field.type}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'textarea':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        multiline\r\n                        rows={3}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'select':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        <Select\r\n                            fullWidth\r\n                            value={value}\r\n                            onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        >\r\n                            {field.options?.map((opt, i) => (\r\n                                <MenuItem key={i} value={opt}>\r\n                                    {opt}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </Box>\r\n                );\r\n\r\n            case 'radio':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                value={opt}\r\n                                control={\r\n                                    <Radio\r\n                                        checked={value === opt}\r\n                                        onChange={() => handlePreviewChange(field.id, opt)}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            case 'checkbox':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={Array.isArray(value) && value.includes(opt)}\r\n                                        onChange={(e) => {\r\n                                            const currentValue = Array.isArray(value) ? value : [];\r\n                                            const newValue = e.target.checked\r\n                                                ? [...currentValue, opt]\r\n                                                : currentValue.filter(v => v !== opt);\r\n                                            handlePreviewChange(field.id, newValue);\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box p={3}>\r\n            <Typography variant=\"h4\" gutterBottom>Create Dynamic Form</Typography>\r\n\r\n            <Box display=\"flex\" gap={2} alignItems=\"center\" mb={3}>\r\n                <Select value={newField} onChange={(e) => setNewField(e.target.value as FieldType)}>\r\n                    <MenuItem value=\"text\">Text</MenuItem>\r\n                    <MenuItem value=\"number\">Number</MenuItem>\r\n                    <MenuItem value=\"textarea\">Textarea</MenuItem>\r\n                    <MenuItem value=\"select\">Select</MenuItem>\r\n                    <MenuItem value=\"radio\">Radio</MenuItem>\r\n                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n                    <MenuItem value=\"date\">Date</MenuItem>\r\n                </Select>\r\n                <Button variant=\"contained\" onClick={addField}>\r\n                    Add Field\r\n                </Button>\r\n                {fields.length > 0 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => setShowPreview(!showPreview)}\r\n                    >\r\n                        {showPreview ? 'Hide Preview' : 'Show Preview'}\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n\r\n            <Box display=\"flex\" gap={3}>\r\n                <Box flex={showPreview ? 1 : 2}>\r\n                    <Typography variant=\"h6\" gutterBottom>Form Builder</Typography>\r\n                    <List>\r\n                        {fields.map((field, index) => (\r\n                            <Box key={field.id} mb={3}>\r\n                                <ListItem>\r\n                                    <Box width=\"100%\">\r\n                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                                            <Typography variant=\"h6\">Field #{index + 1} - {field.type}</Typography>\r\n                                            <IconButton onClick={() => deleteField(field.id)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </Box>\r\n\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Label\"\r\n                                            value={field.label}\r\n                                            onChange={(e) => updateField(field.id, { label: e.target.value })}\r\n                                            margin=\"normal\"\r\n                                        />\r\n\r\n                                        {!field.derived && (\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"Default Value\"\r\n                                                value={field.defaultValue ?? ''}\r\n                                                onChange={(e) => updateField(field.id, { defaultValue: e.target.value })}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        )}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.validation.required}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                required: e.target.checked,\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Required\"\r\n                                        />\r\n\r\n                                        {field.type === 'text' || field.type === 'textarea' ? (\r\n                                            <Box>\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Min Length\"\r\n                                                    value={field.validation.minLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                minLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    sx={{ mr: 2 }}\r\n                                                />\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Max Length\"\r\n                                                    value={field.validation.maxLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                maxLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                <Box>\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.email || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            email: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Email Format\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.password || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            password: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Password Rule\"\r\n                                                    />\r\n                                                </Box>\r\n                                            </Box>\r\n                                        ) : null}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.derived || false}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, { derived: e.target.checked })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Is Derived Field?\"\r\n                                        />\r\n\r\n                                        {field.derived && (\r\n                                            <Box>\r\n                                                <Typography variant=\"subtitle2\" gutterBottom>Parent Fields:</Typography>\r\n                                                {getAvailableParentFields(field.id).map(parentField => (\r\n                                                    <FormControlLabel\r\n                                                        key={parentField.id}\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.parentFields?.includes(parentField.id) || false}\r\n                                                                onChange={(e) => {\r\n                                                                    const current = field.parentFields || [];\r\n                                                                    const updated = e.target.checked\r\n                                                                        ? [...current, parentField.id]\r\n                                                                        : current.filter(id => id !== parentField.id);\r\n                                                                    updateField(field.id, { parentFields: updated });\r\n                                                                }}\r\n                                                            />\r\n                                                        }\r\n                                                        label={`${parentField.label} (${parentField.type})`}\r\n                                                    />\r\n                                                ))}\r\n\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Formula / Logic\"\r\n                                                    value={field.formula || ''}\r\n                                                    onChange={(e) => updateField(field.id, { formula: e.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    helperText=\"Use field labels in lowercase with underscores (e.g., calculateAge(date_of_birth))\"\r\n                                                />\r\n\r\n                                                {field.parentFields && field.parentFields.length > 0 && field.formula && (\r\n                                                    <Alert severity=\"info\" sx={{ mt: 1 }}>\r\n                                                        Available variables: {field.parentFields.map(id => {\r\n                                                            const parentField = fields.find(f => f.id === id);\r\n                                                            return parentField?.label.toLowerCase().replace(/\\s+/g, '_');\r\n                                                        }).join(', ')}\r\n                                                    </Alert>\r\n                                                )}\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && !field.derived && (\r\n                                            <Box mb={2}>\r\n                                                <Typography variant=\"subtitle1\">Options</Typography>\r\n                                                {field.options?.map((option, optIdx) => (\r\n                                                    <Box key={optIdx} display=\"flex\" alignItems=\"center\" mb={1} gap={1}>\r\n                                                        <TextField\r\n                                                            label={`Option ${optIdx + 1}`}\r\n                                                            value={option}\r\n                                                            onChange={(e) => {\r\n                                                                const newOptions = [...(field.options ?? [])];\r\n                                                                newOptions[optIdx] = e.target.value;\r\n                                                                updateField(field.id, { options: newOptions });\r\n                                                            }}\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                        {field.options && field.options.length > 2 && (\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                onClick={() => {\r\n                                                                    const newOptions = field.options!.filter((_, i) => i !== optIdx);\r\n                                                                    updateField(field.id, { options: newOptions });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteIcon fontSize=\"small\" />\r\n                                                            </IconButton>\r\n                                                        )}\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                field.type === 'checkbox' ? (\r\n                                                                    <Checkbox\r\n                                                                        checked={Array.isArray(field.validation['correctAnswers']) ?\r\n                                                                            field.validation['correctAnswers'].includes(option) : false}\r\n                                                                        onChange={(e) => {\r\n                                                                            let correctAnswers = Array.isArray(field.validation['correctAnswers'])\r\n                                                                                ? [...field.validation['correctAnswers']]\r\n                                                                                : [];\r\n                                                                            if (e.target.checked) {\r\n                                                                                correctAnswers.push(option);\r\n                                                                            } else {\r\n                                                                                correctAnswers = correctAnswers.filter(ans => ans !== option);\r\n                                                                            }\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswers,\r\n                                                                                },\r\n                                                                            });\r\n                                                                        }}\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <Radio\r\n                                                                        checked={field.validation['correctAnswer'] === option}\r\n                                                                        onChange={() =>\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswer: option,\r\n                                                                                },\r\n                                                                            })\r\n                                                                        }\r\n                                                                    />\r\n                                                                )\r\n                                                            }\r\n                                                            label=\"Correct\"\r\n                                                        />\r\n                                                    </Box>\r\n                                                ))}\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const newOptions = [...(field.options ?? []), `Option ${field.options!.length + 1}`];\r\n                                                        updateField(field.id, { options: newOptions });\r\n                                                    }}\r\n                                                >\r\n                                                    Add Option\r\n                                                </Button>\r\n                                            </Box>\r\n                                        )}\r\n                                    </Box>\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </Box>\r\n                        ))}\r\n                    </List>\r\n                </Box>\r\n\r\n                {showPreview && fields.length > 0 && (\r\n                    <Box flex={1}>\r\n                        <Paper elevation={2} sx={{ p: 3 }}>\r\n                            <Typography variant=\"h6\" gutterBottom>Live Preview</Typography>\r\n                            <Box>\r\n                                {fields.map(field => (\r\n                                    field.label ? renderPreviewField(field) : null\r\n                                ))}\r\n                                {fields.some(f => f.derived) && (\r\n                                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                                        Derived fields will auto-update as you change parent fields above.\r\n                                    </Alert>\r\n                                )}\r\n                            </Box>\r\n                        </Paper>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n\r\n            <Box mt={3}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenDialog(true)} disabled={fields.length === 0}>\r\n                    Save Form\r\n                </Button>\r\n            </Box>\r\n\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Save Form</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Form Name\"\r\n                        value={formName}\r\n                        onChange={(e) => setFormName(e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={saveForm} variant=\"contained\" color=\"primary\" disabled={!formName}>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CreateForm;","import React, { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Select,\r\n    MenuItem,\r\n    RadioGroup,\r\n    Radio,\r\n    FormHelperText,\r\n    Button,\r\n    Alert,\r\n} from '@mui/material';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n    id: string;\r\n    type: string;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n}\r\n\r\ninterface FormSchema {\r\n    name: string;\r\n    fields: Field[];\r\n}\r\n\r\nconst PreviewForm: React.FC = () => {\r\n    const [schema, setSchema] = useState<FormSchema | null>(null);\r\n    const [values, setValues] = useState<Record<string, any>>({});\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [result, setResult] = useState<string | null>(null);\r\n\r\n    const { formId } = useParams<{ formId: string }>();\r\n\r\n    useEffect(() => {\r\n        if (!formId) return;\r\n\r\n        const stored = localStorage.getItem(formId);\r\n        if (stored) {\r\n            const parsed = JSON.parse(stored) as FormSchema;\r\n            setSchema(parsed);\r\n\r\n            const defaults: Record<string, any> = {};\r\n            parsed.fields.forEach((f) => {\r\n                if (!f.derived) {\r\n                    defaults[f.id] = f.defaultValue || (f.type === 'checkbox' ? [] : '');\r\n                }\r\n            });\r\n            setValues(defaults);\r\n        }\r\n    }, [formId]);\r\n\r\n    const evalFormula = useCallback((formula: string, context: Record<string, any>) => {\r\n        try {\r\n            let contextValues = Object.values(context);\r\n            if (contextValues.some(val => val === '' || val === undefined || val === null)) {\r\n                return '';\r\n            }\r\n\r\n            const safeContext = { ...context };\r\n\r\n            const helpers = {\r\n                Date: Date,\r\n                Math: Math,\r\n                parseInt: parseInt,\r\n                parseFloat: parseFloat,\r\n                calculateAge: (birthDate: string) => {\r\n                    if (!birthDate) return 0;\r\n                    const today = new Date();\r\n                    const birth = new Date(birthDate);\r\n                    if (isNaN(birth.getTime())) return 0;\r\n\r\n                    let age = today.getFullYear() - birth.getFullYear();\r\n                    const monthDiff = today.getMonth() - birth.getMonth();\r\n\r\n                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n                        age--;\r\n                    }\r\n                    return age;\r\n                }\r\n            };\r\n\r\n            const evalContext = { ...safeContext, ...helpers };\r\n\r\n            const params = Object.keys(evalContext);\r\n            contextValues = Object.values(evalContext);\r\n\r\n            const func = new Function(...params, `\"use strict\"; return (${formula});`);\r\n            return func(...contextValues);\r\n        } catch (error) {\r\n            console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\r\n            return 'Error';\r\n        }\r\n    }, []);\r\n\r\n    const updateDerivedFields = useCallback((currentValues: Record<string, any>) => {\r\n        if (!schema) return currentValues;\r\n\r\n        const newValues = { ...currentValues };\r\n        let hasChanges = false;\r\n\r\n        schema.fields.forEach(field => {\r\n            if (field.derived && field.parentFields && field.formula) {\r\n                const context: Record<string, any> = {};\r\n                let hasAllParents = true;\r\n\r\n                field.parentFields.forEach(parentId => {\r\n                    const parentField = schema.fields.find(f => f.id === parentId);\r\n                    if (parentField && parentId in currentValues) {\r\n                        const variableName = parentField.label.toLowerCase().replace(/\\s+/g, '_');\r\n                        context[variableName] = currentValues[parentId];\r\n                    } else {\r\n                        hasAllParents = false;\r\n                    }\r\n                });\r\n\r\n                if (hasAllParents) {\r\n                    const computedValue = evalFormula(field.formula, context);\r\n                    \r\n                    if (newValues[field.id] !== computedValue) {\r\n                        newValues[field.id] = computedValue;\r\n                        hasChanges = true;\r\n                    }\r\n                } else {\r\n                    if (field.id in newValues) {\r\n                        delete newValues[field.id];\r\n                        hasChanges = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return hasChanges ? newValues : currentValues;\r\n    }, [schema, evalFormula]);\r\n\r\n    useEffect(() => {\r\n        if (!schema || Object.keys(values).length === 0) return;\r\n\r\n        const updatedValues = updateDerivedFields(values);\r\n        if (updatedValues !== values) {\r\n            setValues(updatedValues);\r\n        }\r\n    }, [schema, values, updateDerivedFields]);\r\n\r\n    const validateField = useCallback((field: Field, value: any): string => {\r\n        const { validation } = field;\r\n\r\n        if (validation.required && (!value || (Array.isArray(value) && value.length === 0))) {\r\n            return 'This field is required.';\r\n        }\r\n\r\n        if (typeof value === 'string') {\r\n            if (validation.minLength && value.length < validation.minLength) {\r\n                return `Minimum length is ${validation.minLength}`;\r\n            }\r\n            if (validation.maxLength && value.length > validation.maxLength) {\r\n                return `Maximum length is ${validation.maxLength}`;\r\n            }\r\n            if (validation.email && value && !/^\\S+@\\S+\\.\\S+$/.test(value)) {\r\n                return 'Invalid email format.';\r\n            }\r\n            if (validation.password && value &&\r\n                (!/^.{8,}$/.test(value) || !/\\d/.test(value))) {\r\n                return 'Password must be at least 8 characters and contain a number.';\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }, []);\r\n\r\n    const handleChange = useCallback((id: string, value: any) => {\r\n        const newValues = { ...values, [id]: value };\r\n        \r\n        const updatedValues = updateDerivedFields(newValues);\r\n        setValues(updatedValues);\r\n\r\n        const field = schema?.fields.find(f => f.id === id);\r\n        if (field && !field.derived) {\r\n            const err = validateField(field, value);\r\n            setErrors(prev => ({ ...prev, [id]: err }));\r\n        }\r\n    }, [values, updateDerivedFields, schema, validateField]);\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setSubmitted(true);\r\n\r\n        const newErrors: Record<string, string> = {};\r\n\r\n        schema?.fields.forEach(field => {\r\n            if (!field.derived) {\r\n                const err = validateField(field, values[field.id]);\r\n                if (err) newErrors[field.id] = err;\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n\r\n        let correct = true;\r\n        let feedback = '';\r\n\r\n        schema?.fields.forEach(field => {\r\n            const fieldValue = values[field.id];\r\n\r\n            if ((field.type === 'radio' || field.type === 'select') && field.validation.correctAnswer) {\r\n                if (fieldValue !== field.validation.correctAnswer) {\r\n                    correct = false;\r\n                    feedback += `${field.label}: Incorrect answer.\\n`;\r\n                }\r\n            }\r\n\r\n            if (field.type === 'checkbox' && Array.isArray(field.validation.correctAnswers)) {\r\n                const userAnswers = Array.isArray(fieldValue) ? fieldValue : [];\r\n                const correctAnswers = field.validation.correctAnswers;\r\n\r\n                if (userAnswers.length !== correctAnswers.length ||\r\n                    !correctAnswers.every(ans => userAnswers.includes(ans))) {\r\n                    correct = false;\r\n                    feedback += `${field.label}: Incorrect answer.\\n`;\r\n                }\r\n            }\r\n        });\r\n\r\n        setResult(correct ? 'All answers are correct!' : feedback || 'Some answers are incorrect.');\r\n\r\n        if (Object.keys(newErrors).length === 0) {\r\n            console.log('Form Values:', values);\r\n            alert('Form submitted successfully (check console for values)!');\r\n        }\r\n    };\r\n\r\n    if (!schema) {\r\n        return <Typography>Loading form...</Typography>;\r\n    }\r\n\r\n    return (\r\n        <Box p={4}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Preview: {schema.name}\r\n            </Typography>\r\n\r\n            <Box component=\"form\" display=\"flex\" flexDirection=\"column\" gap={3} onSubmit={handleSubmit}>\r\n                {schema.fields.map(field => {\r\n                    const value = values[field.id] ?? (field.type === 'checkbox' ? [] : '');\r\n                    const error = errors[field.id] ?? '';\r\n                    const isDisabled = field.derived || false;\r\n\r\n                    switch (field.type) {\r\n                        case 'text':\r\n                        case 'number':\r\n                        case 'date':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    type={field.type}\r\n                                    label={`${field.label}${isDisabled ? ' (Auto-calculated)' : ''}`}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error || (isDisabled ? 'This field is automatically calculated' : '')}\r\n                                    disabled={isDisabled}\r\n                                    sx={isDisabled ? { '& .MuiInputBase-input': { color: 'text.secondary' } } : {}}\r\n                                />\r\n                            );\r\n\r\n                        case 'textarea':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    label={`${field.label}${isDisabled ? ' (Auto-calculated)' : ''}`}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error || (isDisabled ? 'This field is automatically calculated' : '')}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    disabled={isDisabled}\r\n                                    sx={isDisabled ? { '& .MuiInputBase-input': { color: 'text.secondary' } } : {}}\r\n                                />\r\n                            );\r\n\r\n                        case 'select':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    <Select\r\n                                        fullWidth\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                        disabled={isDisabled}\r\n                                        sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <MenuItem key={i} value={opt}>\r\n                                                {opt}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'radio':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    <RadioGroup\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <FormControlLabel\r\n                                                key={i}\r\n                                                value={opt}\r\n                                                control={<Radio disabled={isDisabled} />}\r\n                                                label={opt}\r\n                                                sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                            />\r\n                                        ))}\r\n                                    </RadioGroup>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'checkbox':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    {field.options?.map((opt, i) => (\r\n                                        <FormControlLabel\r\n                                            key={i}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={Array.isArray(value) && value.includes(opt)}\r\n                                                    onChange={(e) => {\r\n                                                        if (!isDisabled) {\r\n                                                            const checked = e.target.checked;\r\n                                                            const currentValue = Array.isArray(value) ? value : [];\r\n                                                            const newValue = checked\r\n                                                                ? [...currentValue, opt]\r\n                                                                : currentValue.filter(v => v !== opt);\r\n                                                            handleChange(field.id, newValue);\r\n                                                        }\r\n                                                    }}\r\n                                                    disabled={isDisabled}\r\n                                                />\r\n                                            }\r\n                                            label={opt}\r\n                                            sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                        />\r\n                                    ))}\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        default:\r\n                            return null;\r\n                    }\r\n                })}\r\n\r\n                <Button variant=\"contained\" type=\"submit\" size=\"large\">\r\n                    Submit\r\n                </Button>\r\n            </Box>\r\n\r\n            {submitted && result && (\r\n                <Box mt={2}>\r\n                    <Alert severity={result === 'All answers are correct!' ? 'success' : 'error'}>\r\n                        {result}\r\n                    </Alert>\r\n                </Box>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PreviewForm;","import React, { useEffect, useState } from 'react';\r\nimport { Box, Typography, List, ListItemButton, ListItemText, Divider } from '@mui/material';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface FormSchema {\r\n  name: string;\r\n  createdAt: string;\r\n  fields: any[];\r\n}\r\n\r\nconst MyForms: React.FC = () => {\r\n  const [forms, setForms] = useState<{ key: string; data: FormSchema }[]>([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const formKeys = Object.keys(localStorage).filter((key) => key.startsWith('form_'));\r\n    const loadedForms = formKeys.map((key) => {\r\n      const raw = localStorage.getItem(key);\r\n      if (!raw) return null;\r\n      try {\r\n        const data = JSON.parse(raw) as FormSchema;\r\n        return { key, data };\r\n      } catch (e) {\r\n        console.error(`Error parsing form ${key}:`, e);\r\n        return null;\r\n      }\r\n    }).filter(Boolean) as { key: string; data: FormSchema }[];\r\n\r\n    setForms(loadedForms);\r\n  }, []);\r\n\r\n  const handleClick = (key: string) => {\r\n    history.push(`/preview-form/${encodeURIComponent(key)}`);\r\n  };\r\n\r\n  return (\r\n    <Box p={4}>\r\n      <Typography variant=\"h4\" gutterBottom>Saved Forms</Typography>\r\n      <List>\r\n        {forms.map(({ key, data }) => (\r\n          <React.Fragment key={key}>\r\n            <ListItemButton onClick={() => handleClick(key)}>\r\n              <ListItemText\r\n                primary={data.name}\r\n                secondary={`Created: ${new Date(data.createdAt).toLocaleString()}`}\r\n              />\r\n            </ListItemButton>\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n        {forms.length === 0 && (\r\n          <Typography>No saved forms found.</Typography>\r\n        )}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyForms;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport CreateForm from './components/CreateForm';\nimport PreviewForm from './components/PreviewForm';\nimport MyForms from './components/MyForms';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/create-form\" component={CreateForm} />\n                <Route path=\"/preview-form/:formId\" component={PreviewForm} />\n                <Route path=\"/my-forms\" component={MyForms} />\n                <Redirect from=\"/\" to=\"/create-form\" exact />\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}