{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ishik\\\\VS code\\\\Form\\\\dynamic-form-builder\\\\src\\\\components\\\\CreateForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio, Paper, Alert } from '@mui/material';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SvgIcon } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeleteIcon = props => /*#__PURE__*/_jsxDEV(SvgIcon, {\n  ...props,\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 5\n}, this);\n_c = DeleteIcon;\nconst CreateForm = () => {\n  _s();\n  const [fields, setFields] = useState([]);\n  const [newField, setNewField] = useState('text');\n  const [formName, setFormName] = useState('');\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewValues, setPreviewValues] = useState({});\n  const evalFormula = useCallback((formula, context) => {\n    try {\n      const safeContext = {\n        ...context\n      };\n      const helpers = {\n        Date: Date,\n        Math: Math,\n        parseInt: parseInt,\n        parseFloat: parseFloat,\n        calculateAge: birthDate => {\n          if (!birthDate) return 0;\n          const today = new Date();\n          const birth = new Date(birthDate);\n          if (isNaN(birth.getTime())) return 0;\n          let age = today.getFullYear() - birth.getFullYear();\n          const monthDiff = today.getMonth() - birth.getMonth();\n          if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {\n            age--;\n          }\n          return age;\n        }\n      };\n      const evalContext = {\n        ...safeContext,\n        ...helpers\n      };\n      const params = Object.keys(evalContext);\n      const values = Object.values(evalContext);\n      const func = new Function(...params, `\"use strict\"; return (${formula});`);\n      return func(...values);\n    } catch (error) {\n      console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\n      return 'Error';\n    }\n  }, []);\n  const updateDerivedFields = useCallback(values => {\n    const newValues = {\n      ...values\n    };\n    let hasChanges = false;\n    fields.forEach(field => {\n      if (field.derived && field.parentFields && field.formula) {\n        const context = {};\n        let hasAllParents = true;\n        field.parentFields.forEach(parentId => {\n          const parentField = fields.find(f => f.id === parentId);\n          if (parentField && parentId in values) {\n            context[parentField.label.toLowerCase().replace(/\\s+/g, '_')] = values[parentId];\n          } else {\n            hasAllParents = false;\n          }\n        });\n        if (hasAllParents) {\n          const computedValue = evalFormula(field.formula, context);\n          if (newValues[field.id] !== computedValue) {\n            newValues[field.id] = computedValue;\n            hasChanges = true;\n          }\n        }\n      }\n    });\n    if (hasChanges) {\n      setPreviewValues(newValues);\n    }\n  }, [fields, evalFormula]);\n  const addField = () => {\n    const id = uuidv4();\n    const field = {\n      id,\n      type: newField,\n      label: '',\n      validation: {\n        required: false\n      },\n      options: newField === 'select' ? [] : undefined\n    };\n    if (['select', 'radio', 'checkbox'].includes(newField)) {\n      field.options = ['Option 1', 'Option 2'];\n    }\n    setFields(prev => [...prev, field]);\n  };\n  const updateField = (id, updated) => {\n    setFields(prev => prev.map(field => field.id === id ? {\n      ...field,\n      ...updated\n    } : field));\n  };\n  const deleteField = id => {\n    setFields(prev => prev.filter(field => field.id !== id));\n    setPreviewValues(prev => {\n      const newValues = {\n        ...prev\n      };\n      delete newValues[id];\n      return newValues;\n    });\n  };\n  const saveForm = () => {\n    const formSchema = {\n      name: formName,\n      fields,\n      createdAt: new Date().toISOString()\n    };\n    localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\n    setOpenDialog(false);\n    alert('Form saved successfully!');\n    setFields([]);\n    setFormName('');\n    setPreviewValues({});\n  };\n  const handlePreviewChange = (fieldId, value) => {\n    const newValues = {\n      ...previewValues,\n      [fieldId]: value\n    };\n    setPreviewValues(newValues);\n    updateDerivedFields(newValues);\n  };\n  const getAvailableParentFields = currentFieldId => {\n    return fields.filter(f => f.id !== currentFieldId && !f.derived && f.label.trim() !== '');\n  };\n  const renderPreviewField = field => {\n    var _previewValues$field$, _field$options, _field$options2, _field$options3;\n    const value = (_previewValues$field$ = previewValues[field.id]) !== null && _previewValues$field$ !== void 0 ? _previewValues$field$ : field.type === 'checkbox' ? [] : '';\n    if (field.derived) {\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: `${field.label} (Auto-calculated)`,\n        value: value,\n        disabled: true,\n        margin: \"normal\",\n        sx: {\n          '& .MuiInputBase-input': {\n            color: 'text.secondary'\n          }\n        }\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this);\n    }\n    switch (field.type) {\n      case 'text':\n      case 'number':\n      case 'date':\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          type: field.type,\n          fullWidth: true,\n          label: field.label,\n          value: value,\n          onChange: e => handlePreviewChange(field.id, e.target.value),\n          margin: \"normal\"\n        }, field.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this);\n      case 'textarea':\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: field.label,\n          value: value,\n          onChange: e => handlePreviewChange(field.id, e.target.value),\n          multiline: true,\n          rows: 3,\n          margin: \"normal\"\n        }, field.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this);\n      case 'select':\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            value: value,\n            onChange: e => handlePreviewChange(field.id, e.target.value),\n            children: (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.map((opt, i) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: opt,\n              children: opt\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this);\n      case 'radio':\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), (_field$options2 = field.options) === null || _field$options2 === void 0 ? void 0 : _field$options2.map((opt, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: opt,\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              checked: value === opt,\n              onChange: () => handlePreviewChange(field.id, opt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 37\n            }, this),\n            label: opt\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this))]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this);\n      case 'checkbox':\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), (_field$options3 = field.options) === null || _field$options3 === void 0 ? void 0 : _field$options3.map((opt, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: Array.isArray(value) && value.includes(opt),\n              onChange: e => {\n                const currentValue = Array.isArray(value) ? value : [];\n                const newValue = e.target.checked ? [...currentValue, opt] : currentValue.filter(v => v !== opt);\n                handlePreviewChange(field.id, newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 37\n            }, this),\n            label: opt\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 29\n          }, this))]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 3,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Create Dynamic Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      gap: 2,\n      alignItems: \"center\",\n      mb: 3,\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        value: newField,\n        onChange: e => setNewField(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"text\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"number\",\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"textarea\",\n          children: \"Textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"select\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"radio\",\n          children: \"Radio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"checkbox\",\n          children: \"Checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"date\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: addField,\n        children: \"Add Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), fields.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => setShowPreview(!showPreview),\n        children: showPreview ? 'Hide Preview' : 'Show Preview'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      gap: 3,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        flex: showPreview ? 1 : 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Form Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: fields.map((field, index) => {\n            var _field$defaultValue, _field$options4;\n            return /*#__PURE__*/_jsxDEV(Box, {\n              mb: 3,\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  width: \"100%\",\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    mb: 1,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      children: [\"Field #\", index + 1, \" - \", field.type]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      onClick: () => deleteField(field.id),\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 325,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Label\",\n                    value: field.label,\n                    onChange: e => updateField(field.id, {\n                      label: e.target.value\n                    }),\n                    margin: \"normal\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 41\n                  }, this), !field.derived && /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Default Value\",\n                    value: (_field$defaultValue = field.defaultValue) !== null && _field$defaultValue !== void 0 ? _field$defaultValue : '',\n                    onChange: e => updateField(field.id, {\n                      defaultValue: e.target.value\n                    }),\n                    margin: \"normal\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: field.validation.required,\n                      onChange: e => updateField(field.id, {\n                        validation: {\n                          ...field.validation,\n                          required: e.target.checked\n                        }\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 49\n                    }, this),\n                    label: \"Required\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 347,\n                    columnNumber: 41\n                  }, this), field.type === 'text' || field.type === 'textarea' ? /*#__PURE__*/_jsxDEV(Box, {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      type: \"number\",\n                      label: \"Min Length\",\n                      value: field.validation.minLength || '',\n                      onChange: e => updateField(field.id, {\n                        validation: {\n                          ...field.validation,\n                          minLength: Number(e.target.value)\n                        }\n                      }),\n                      margin: \"normal\",\n                      size: \"small\",\n                      sx: {\n                        mr: 2\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                      type: \"number\",\n                      label: \"Max Length\",\n                      value: field.validation.maxLength || '',\n                      onChange: e => updateField(field.id, {\n                        validation: {\n                          ...field.validation,\n                          maxLength: Number(e.target.value)\n                        }\n                      }),\n                      margin: \"normal\",\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 382,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Box, {\n                      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: field.validation.email || false,\n                          onChange: e => updateField(field.id, {\n                            validation: {\n                              ...field.validation,\n                              email: e.target.checked\n                            }\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 400,\n                          columnNumber: 61\n                        }, this),\n                        label: \"Email Format\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 398,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: field.validation.password || false,\n                          onChange: e => updateField(field.id, {\n                            validation: {\n                              ...field.validation,\n                              password: e.target.checked\n                            }\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 416,\n                          columnNumber: 61\n                        }, this),\n                        label: \"Password Rule\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 414,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 397,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 45\n                  }, this) : null, /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: field.derived || false,\n                      onChange: e => updateField(field.id, {\n                        derived: e.target.checked\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 436,\n                      columnNumber: 49\n                    }, this),\n                    label: \"Is Derived Field?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 41\n                  }, this), field.derived && /*#__PURE__*/_jsxDEV(Box, {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"subtitle2\",\n                      gutterBottom: true,\n                      children: \"Parent Fields:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 448,\n                      columnNumber: 49\n                    }, this), getAvailableParentFields(field.id).map(parentField => {\n                      var _field$parentFields;\n                      return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: ((_field$parentFields = field.parentFields) === null || _field$parentFields === void 0 ? void 0 : _field$parentFields.includes(parentField.id)) || false,\n                          onChange: e => {\n                            const current = field.parentFields || [];\n                            const updated = e.target.checked ? [...current, parentField.id] : current.filter(id => id !== parentField.id);\n                            updateField(field.id, {\n                              parentFields: updated\n                            });\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 453,\n                          columnNumber: 61\n                        }, this),\n                        label: `${parentField.label} (${parentField.type})`\n                      }, parentField.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 53\n                      }, this);\n                    }), /*#__PURE__*/_jsxDEV(TextField, {\n                      fullWidth: true,\n                      label: \"Formula / Logic\",\n                      value: field.formula || '',\n                      onChange: e => updateField(field.id, {\n                        formula: e.target.value\n                      }),\n                      margin: \"normal\",\n                      helperText: \"Use field labels in lowercase with underscores (e.g., calculateAge(date_of_birth))\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 468,\n                      columnNumber: 49\n                    }, this), field.parentFields && field.parentFields.length > 0 && field.formula && /*#__PURE__*/_jsxDEV(Alert, {\n                      severity: \"info\",\n                      sx: {\n                        mt: 1\n                      },\n                      children: [\"Available variables: \", field.parentFields.map(id => {\n                        const parentField = fields.find(f => f.id === id);\n                        return parentField === null || parentField === void 0 ? void 0 : parentField.label.toLowerCase().replace(/\\s+/g, '_');\n                      }).join(', ')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 447,\n                    columnNumber: 45\n                  }, this), (field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && !field.derived && /*#__PURE__*/_jsxDEV(Box, {\n                    mb: 2,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"subtitle1\",\n                      children: \"Options\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 490,\n                      columnNumber: 49\n                    }, this), (_field$options4 = field.options) === null || _field$options4 === void 0 ? void 0 : _field$options4.map((option, optIdx) => /*#__PURE__*/_jsxDEV(Box, {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      mb: 1,\n                      gap: 1,\n                      children: [/*#__PURE__*/_jsxDEV(TextField, {\n                        label: `Option ${optIdx + 1}`,\n                        value: option,\n                        onChange: e => {\n                          var _field$options5;\n                          const newOptions = [...((_field$options5 = field.options) !== null && _field$options5 !== void 0 ? _field$options5 : [])];\n                          newOptions[optIdx] = e.target.value;\n                          updateField(field.id, {\n                            options: newOptions\n                          });\n                        },\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 493,\n                        columnNumber: 57\n                      }, this), field.options && field.options.length > 2 && /*#__PURE__*/_jsxDEV(IconButton, {\n                        size: \"small\",\n                        onClick: () => {\n                          const newOptions = field.options.filter((_, i) => i !== optIdx);\n                          updateField(field.id, {\n                            options: newOptions\n                          });\n                        },\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                          fontSize: \"small\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 511,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 504,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: field.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: Array.isArray(field.validation['correctAnswers']) ? field.validation['correctAnswers'].includes(option) : false,\n                          onChange: e => {\n                            let correctAnswers = Array.isArray(field.validation['correctAnswers']) ? [...field.validation['correctAnswers']] : [];\n                            if (e.target.checked) {\n                              correctAnswers.push(option);\n                            } else {\n                              correctAnswers = correctAnswers.filter(ans => ans !== option);\n                            }\n                            updateField(field.id, {\n                              validation: {\n                                ...field.validation,\n                                correctAnswers\n                              }\n                            });\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 517,\n                          columnNumber: 69\n                        }, this) : /*#__PURE__*/_jsxDEV(Radio, {\n                          checked: field.validation['correctAnswer'] === option,\n                          onChange: () => updateField(field.id, {\n                            validation: {\n                              ...field.validation,\n                              correctAnswer: option\n                            }\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 538,\n                          columnNumber: 69\n                        }, this),\n                        label: \"Correct\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 514,\n                        columnNumber: 57\n                      }, this)]\n                    }, optIdx, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 492,\n                      columnNumber: 53\n                    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"outlined\",\n                      size: \"small\",\n                      onClick: () => {\n                        var _field$options6;\n                        const newOptions = [...((_field$options6 = field.options) !== null && _field$options6 !== void 0 ? _field$options6 : []), `Option ${field.options.length + 1}`];\n                        updateField(field.id, {\n                          options: newOptions\n                        });\n                      },\n                      children: \"Add Option\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 555,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 489,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 33\n              }, this)]\n            }, field.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), showPreview && fields.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        flex: 1,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Live Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [fields.map(field => field.label ? renderPreviewField(field) : null), fields.some(f => f.derived) && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mt: 2\n              },\n              children: \"Derived fields will auto-update as you change parent fields above.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 3,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setOpenDialog(true),\n        disabled: fields.length === 0,\n        children: \"Save Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => setOpenDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Save Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Form Name\",\n          value: formName,\n          onChange: e => setFormName(e.target.value),\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: saveForm,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !formName,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateForm, \"yB/eI/38LX18l66maE0RjtjQb6g=\");\n_c2 = CreateForm;\nexport default CreateForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeleteIcon\");\n$RefreshReg$(_c2, \"CreateForm\");","map":{"version":3,"names":["React","useState","useCallback","Box","Button","MenuItem","Select","TextField","Typography","Checkbox","FormControlLabel","Dialog","DialogTitle","DialogContent","DialogActions","List","ListItem","IconButton","Divider","Radio","Paper","Alert","v4","uuidv4","SvgIcon","jsxDEV","_jsxDEV","DeleteIcon","props","children","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","CreateForm","_s","fields","setFields","newField","setNewField","formName","setFormName","openDialog","setOpenDialog","showPreview","setShowPreview","previewValues","setPreviewValues","evalFormula","formula","context","safeContext","helpers","Date","Math","parseInt","parseFloat","calculateAge","birthDate","today","birth","isNaN","getTime","age","getFullYear","monthDiff","getMonth","getDate","evalContext","params","Object","keys","values","func","Function","error","console","updateDerivedFields","newValues","hasChanges","forEach","field","derived","parentFields","hasAllParents","parentId","parentField","find","f","id","label","toLowerCase","replace","computedValue","addField","type","validation","required","options","undefined","includes","prev","updateField","updated","map","deleteField","filter","saveForm","formSchema","name","createdAt","toISOString","localStorage","setItem","JSON","stringify","alert","handlePreviewChange","fieldId","value","getAvailableParentFields","currentFieldId","trim","renderPreviewField","_previewValues$field$","_field$options","_field$options2","_field$options3","fullWidth","disabled","margin","sx","color","onChange","e","target","multiline","rows","mb","opt","i","control","checked","Array","isArray","currentValue","newValue","v","p","variant","gutterBottom","display","gap","alignItems","onClick","length","flex","index","_field$defaultValue","_field$options4","width","justifyContent","defaultValue","minLength","Number","size","mr","maxLength","email","password","_field$parentFields","current","helperText","severity","mt","join","option","optIdx","_field$options5","newOptions","_","fontSize","correctAnswers","push","ans","correctAnswer","_field$options6","elevation","some","open","onClose","_c2","$RefreshReg$"],"sources":["C:/Users/ishik/VS code/Form/dynamic-form-builder/src/components/CreateForm.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio, Paper, Alert } from '@mui/material';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { SvgIcon } from '@mui/material';\r\n\r\nconst DeleteIcon = (props: any) => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\r\n    </SvgIcon>\r\n);\r\n\r\ntype FieldType = 'text' | 'number' | 'textarea' | 'select' | 'radio' | 'checkbox' | 'date';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    id: string;\r\n    type: FieldType;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n}\r\n\r\nconst CreateForm: React.FC = () => {\r\n    const [fields, setFields] = useState<Field[]>([]);\r\n    const [newField, setNewField] = useState<FieldType>('text');\r\n    const [formName, setFormName] = useState('');\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [showPreview, setShowPreview] = useState(false);\r\n    const [previewValues, setPreviewValues] = useState<Record<string, any>>({});\r\n    const evalFormula = useCallback((formula: string, context: Record<string, any>) => {\r\n        try {\r\n            const safeContext = { ...context };\r\n\r\n            const helpers = {\r\n                Date: Date,\r\n                Math: Math,\r\n                parseInt: parseInt,\r\n                parseFloat: parseFloat,\r\n                calculateAge: (birthDate: string) => {\r\n                    if (!birthDate) return 0;\r\n                    const today = new Date();\r\n                    const birth = new Date(birthDate);\r\n                    if (isNaN(birth.getTime())) return 0;\r\n\r\n                    let age = today.getFullYear() - birth.getFullYear();\r\n                    const monthDiff = today.getMonth() - birth.getMonth();\r\n\r\n                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n                        age--;\r\n                    }\r\n                    return age;\r\n                }\r\n            };\r\n\r\n            const evalContext = { ...safeContext, ...helpers };\r\n\r\n            const params = Object.keys(evalContext);\r\n            const values = Object.values(evalContext);\r\n\r\n            const func = new Function(...params, `\"use strict\"; return (${formula});`);\r\n            return func(...values);\r\n        } catch (error) {\r\n            console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\r\n            return 'Error';\r\n        }\r\n    }, []);\r\n\r\n    const updateDerivedFields = useCallback((values: Record<string, any>) => {\r\n        const newValues = { ...values };\r\n        let hasChanges = false;\r\n\r\n        fields.forEach(field => {\r\n            if (field.derived && field.parentFields && field.formula) {\r\n                const context: Record<string, any> = {};\r\n                let hasAllParents = true;\r\n\r\n                field.parentFields.forEach(parentId => {\r\n                    const parentField = fields.find(f => f.id === parentId);\r\n                    if (parentField && parentId in values) {\r\n                        context[parentField.label.toLowerCase().replace(/\\s+/g, '_')] = values[parentId];\r\n                    } else {\r\n                        hasAllParents = false;\r\n                    }\r\n                });\r\n\r\n                if (hasAllParents) {\r\n                    const computedValue = evalFormula(field.formula, context);\r\n\r\n                    if (newValues[field.id] !== computedValue) {\r\n                        newValues[field.id] = computedValue;\r\n                        hasChanges = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (hasChanges) {\r\n            setPreviewValues(newValues);\r\n        }\r\n    }, [fields, evalFormula]);\r\n\r\n    const addField = () => {\r\n        const id = uuidv4();\r\n        const field: Field = {\r\n            id,\r\n            type: newField,\r\n            label: '',\r\n            validation: { required: false },\r\n            options: newField === 'select' ? [] : undefined,\r\n        };\r\n\r\n        if (['select', 'radio', 'checkbox'].includes(newField)) {\r\n            field.options = ['Option 1', 'Option 2'];\r\n        }\r\n\r\n        setFields((prev) => [...prev, field]);\r\n    }\r\n\r\n    const updateField = (id: string, updated: Partial<Field>) => {\r\n        setFields((prev) =>\r\n            prev.map((field) => (field.id === id ? { ...field, ...updated } : field))\r\n        );\r\n    };\r\n\r\n    const deleteField = (id: string) => {\r\n        setFields((prev) => prev.filter((field) => field.id !== id));\r\n        setPreviewValues(prev => {\r\n            const newValues = { ...prev };\r\n            delete newValues[id];\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const saveForm = () => {\r\n        const formSchema = {\r\n            name: formName,\r\n            fields,\r\n            createdAt: new Date().toISOString(),\r\n        };\r\n\r\n        localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\r\n        setOpenDialog(false);\r\n        alert('Form saved successfully!');\r\n        setFields([]);\r\n        setFormName('');\r\n        setPreviewValues({});\r\n    };\r\n\r\n    const handlePreviewChange = (fieldId: string, value: any) => {\r\n        const newValues = { ...previewValues, [fieldId]: value };\r\n        setPreviewValues(newValues);\r\n        updateDerivedFields(newValues);\r\n    };\r\n\r\n    const getAvailableParentFields = (currentFieldId: string) => {\r\n        return fields.filter(f => f.id !== currentFieldId && !f.derived && f.label.trim() !== '');\r\n    };\r\n\r\n    const renderPreviewField = (field: Field) => {\r\n        const value = previewValues[field.id] ?? (field.type === 'checkbox' ? [] : '');\r\n\r\n        if (field.derived) {\r\n            return (\r\n                <TextField\r\n                    key={field.id}\r\n                    fullWidth\r\n                    label={`${field.label} (Auto-calculated)`}\r\n                    value={value}\r\n                    disabled\r\n                    margin=\"normal\"\r\n                    sx={{ '& .MuiInputBase-input': { color: 'text.secondary' } }}\r\n                />\r\n            );\r\n        }\r\n\r\n        switch (field.type) {\r\n            case 'text':\r\n            case 'number':\r\n            case 'date':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        type={field.type}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'textarea':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        multiline\r\n                        rows={3}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'select':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        <Select\r\n                            fullWidth\r\n                            value={value}\r\n                            onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        >\r\n                            {field.options?.map((opt, i) => (\r\n                                <MenuItem key={i} value={opt}>\r\n                                    {opt}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </Box>\r\n                );\r\n\r\n            case 'radio':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                value={opt}\r\n                                control={\r\n                                    <Radio\r\n                                        checked={value === opt}\r\n                                        onChange={() => handlePreviewChange(field.id, opt)}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            case 'checkbox':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={Array.isArray(value) && value.includes(opt)}\r\n                                        onChange={(e) => {\r\n                                            const currentValue = Array.isArray(value) ? value : [];\r\n                                            const newValue = e.target.checked\r\n                                                ? [...currentValue, opt]\r\n                                                : currentValue.filter(v => v !== opt);\r\n                                            handlePreviewChange(field.id, newValue);\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box p={3}>\r\n            <Typography variant=\"h4\" gutterBottom>Create Dynamic Form</Typography>\r\n\r\n            <Box display=\"flex\" gap={2} alignItems=\"center\" mb={3}>\r\n                <Select value={newField} onChange={(e) => setNewField(e.target.value as FieldType)}>\r\n                    <MenuItem value=\"text\">Text</MenuItem>\r\n                    <MenuItem value=\"number\">Number</MenuItem>\r\n                    <MenuItem value=\"textarea\">Textarea</MenuItem>\r\n                    <MenuItem value=\"select\">Select</MenuItem>\r\n                    <MenuItem value=\"radio\">Radio</MenuItem>\r\n                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n                    <MenuItem value=\"date\">Date</MenuItem>\r\n                </Select>\r\n                <Button variant=\"contained\" onClick={addField}>\r\n                    Add Field\r\n                </Button>\r\n                {fields.length > 0 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => setShowPreview(!showPreview)}\r\n                    >\r\n                        {showPreview ? 'Hide Preview' : 'Show Preview'}\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n\r\n            <Box display=\"flex\" gap={3}>\r\n                <Box flex={showPreview ? 1 : 2}>\r\n                    <Typography variant=\"h6\" gutterBottom>Form Builder</Typography>\r\n                    <List>\r\n                        {fields.map((field, index) => (\r\n                            <Box key={field.id} mb={3}>\r\n                                <ListItem>\r\n                                    <Box width=\"100%\">\r\n                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                                            <Typography variant=\"h6\">Field #{index + 1} - {field.type}</Typography>\r\n                                            <IconButton onClick={() => deleteField(field.id)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </Box>\r\n\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Label\"\r\n                                            value={field.label}\r\n                                            onChange={(e) => updateField(field.id, { label: e.target.value })}\r\n                                            margin=\"normal\"\r\n                                        />\r\n\r\n                                        {!field.derived && (\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"Default Value\"\r\n                                                value={field.defaultValue ?? ''}\r\n                                                onChange={(e) => updateField(field.id, { defaultValue: e.target.value })}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        )}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.validation.required}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                required: e.target.checked,\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Required\"\r\n                                        />\r\n\r\n                                        {field.type === 'text' || field.type === 'textarea' ? (\r\n                                            <Box>\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Min Length\"\r\n                                                    value={field.validation.minLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                minLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    sx={{ mr: 2 }}\r\n                                                />\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Max Length\"\r\n                                                    value={field.validation.maxLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                maxLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                <Box>\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.email || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            email: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Email Format\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.password || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            password: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Password Rule\"\r\n                                                    />\r\n                                                </Box>\r\n                                            </Box>\r\n                                        ) : null}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.derived || false}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, { derived: e.target.checked })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Is Derived Field?\"\r\n                                        />\r\n\r\n                                        {field.derived && (\r\n                                            <Box>\r\n                                                <Typography variant=\"subtitle2\" gutterBottom>Parent Fields:</Typography>\r\n                                                {getAvailableParentFields(field.id).map(parentField => (\r\n                                                    <FormControlLabel\r\n                                                        key={parentField.id}\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.parentFields?.includes(parentField.id) || false}\r\n                                                                onChange={(e) => {\r\n                                                                    const current = field.parentFields || [];\r\n                                                                    const updated = e.target.checked\r\n                                                                        ? [...current, parentField.id]\r\n                                                                        : current.filter(id => id !== parentField.id);\r\n                                                                    updateField(field.id, { parentFields: updated });\r\n                                                                }}\r\n                                                            />\r\n                                                        }\r\n                                                        label={`${parentField.label} (${parentField.type})`}\r\n                                                    />\r\n                                                ))}\r\n\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Formula / Logic\"\r\n                                                    value={field.formula || ''}\r\n                                                    onChange={(e) => updateField(field.id, { formula: e.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    helperText=\"Use field labels in lowercase with underscores (e.g., calculateAge(date_of_birth))\"\r\n                                                />\r\n\r\n                                                {field.parentFields && field.parentFields.length > 0 && field.formula && (\r\n                                                    <Alert severity=\"info\" sx={{ mt: 1 }}>\r\n                                                        Available variables: {field.parentFields.map(id => {\r\n                                                            const parentField = fields.find(f => f.id === id);\r\n                                                            return parentField?.label.toLowerCase().replace(/\\s+/g, '_');\r\n                                                        }).join(', ')}\r\n                                                    </Alert>\r\n                                                )}\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && !field.derived && (\r\n                                            <Box mb={2}>\r\n                                                <Typography variant=\"subtitle1\">Options</Typography>\r\n                                                {field.options?.map((option, optIdx) => (\r\n                                                    <Box key={optIdx} display=\"flex\" alignItems=\"center\" mb={1} gap={1}>\r\n                                                        <TextField\r\n                                                            label={`Option ${optIdx + 1}`}\r\n                                                            value={option}\r\n                                                            onChange={(e) => {\r\n                                                                const newOptions = [...(field.options ?? [])];\r\n                                                                newOptions[optIdx] = e.target.value;\r\n                                                                updateField(field.id, { options: newOptions });\r\n                                                            }}\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                        {field.options && field.options.length > 2 && (\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                onClick={() => {\r\n                                                                    const newOptions = field.options!.filter((_, i) => i !== optIdx);\r\n                                                                    updateField(field.id, { options: newOptions });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteIcon fontSize=\"small\" />\r\n                                                            </IconButton>\r\n                                                        )}\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                field.type === 'checkbox' ? (\r\n                                                                    <Checkbox\r\n                                                                        checked={Array.isArray(field.validation['correctAnswers']) ?\r\n                                                                            field.validation['correctAnswers'].includes(option) : false}\r\n                                                                        onChange={(e) => {\r\n                                                                            let correctAnswers = Array.isArray(field.validation['correctAnswers'])\r\n                                                                                ? [...field.validation['correctAnswers']]\r\n                                                                                : [];\r\n                                                                            if (e.target.checked) {\r\n                                                                                correctAnswers.push(option);\r\n                                                                            } else {\r\n                                                                                correctAnswers = correctAnswers.filter(ans => ans !== option);\r\n                                                                            }\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswers,\r\n                                                                                },\r\n                                                                            });\r\n                                                                        }}\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <Radio\r\n                                                                        checked={field.validation['correctAnswer'] === option}\r\n                                                                        onChange={() =>\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswer: option,\r\n                                                                                },\r\n                                                                            })\r\n                                                                        }\r\n                                                                    />\r\n                                                                )\r\n                                                            }\r\n                                                            label=\"Correct\"\r\n                                                        />\r\n                                                    </Box>\r\n                                                ))}\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const newOptions = [...(field.options ?? []), `Option ${field.options!.length + 1}`];\r\n                                                        updateField(field.id, { options: newOptions });\r\n                                                    }}\r\n                                                >\r\n                                                    Add Option\r\n                                                </Button>\r\n                                            </Box>\r\n                                        )}\r\n                                    </Box>\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </Box>\r\n                        ))}\r\n                    </List>\r\n                </Box>\r\n\r\n                {showPreview && fields.length > 0 && (\r\n                    <Box flex={1}>\r\n                        <Paper elevation={2} sx={{ p: 3 }}>\r\n                            <Typography variant=\"h6\" gutterBottom>Live Preview</Typography>\r\n                            <Box>\r\n                                {fields.map(field => (\r\n                                    field.label ? renderPreviewField(field) : null\r\n                                ))}\r\n                                {fields.some(f => f.derived) && (\r\n                                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                                        Derived fields will auto-update as you change parent fields above.\r\n                                    </Alert>\r\n                                )}\r\n                            </Box>\r\n                        </Paper>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n\r\n            <Box mt={3}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenDialog(true)} disabled={fields.length === 0}>\r\n                    Save Form\r\n                </Button>\r\n            </Box>\r\n\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Save Form</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Form Name\"\r\n                        value={formName}\r\n                        onChange={(e) => setFormName(e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={saveForm} variant=\"contained\" color=\"primary\" disabled={!formName}>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CreateForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,QAAQ,eAAe;AAC7N,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAIC,KAAU,iBAC1BF,OAAA,CAACF,OAAO;EAAA,GAAKI,KAAK;EAAAC,QAAA,eACdH,OAAA;IAAMI,CAAC,EAAC;EAA+E;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACrF,CACZ;AAACC,EAAA,GAJIR,UAAU;AA8BhB,MAAMS,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtC,QAAQ,CAAU,EAAE,CAAC;EACjD,MAAM,CAACuC,QAAQ,EAAEC,WAAW,CAAC,GAAGxC,QAAQ,CAAY,MAAM,CAAC;EAC3D,MAAM,CAACyC,QAAQ,EAAEC,WAAW,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6C,WAAW,EAAEC,cAAc,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC+C,aAAa,EAAEC,gBAAgB,CAAC,GAAGhD,QAAQ,CAAsB,CAAC,CAAC,CAAC;EAC3E,MAAMiD,WAAW,GAAGhD,WAAW,CAAC,CAACiD,OAAe,EAAEC,OAA4B,KAAK;IAC/E,IAAI;MACA,MAAMC,WAAW,GAAG;QAAE,GAAGD;MAAQ,CAAC;MAElC,MAAME,OAAO,GAAG;QACZC,IAAI,EAAEA,IAAI;QACVC,IAAI,EAAEA,IAAI;QACVC,QAAQ,EAAEA,QAAQ;QAClBC,UAAU,EAAEA,UAAU;QACtBC,YAAY,EAAGC,SAAiB,IAAK;UACjC,IAAI,CAACA,SAAS,EAAE,OAAO,CAAC;UACxB,MAAMC,KAAK,GAAG,IAAIN,IAAI,CAAC,CAAC;UACxB,MAAMO,KAAK,GAAG,IAAIP,IAAI,CAACK,SAAS,CAAC;UACjC,IAAIG,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;UAEpC,IAAIC,GAAG,GAAGJ,KAAK,CAACK,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACI,WAAW,CAAC,CAAC;UACnD,MAAMC,SAAS,GAAGN,KAAK,CAACO,QAAQ,CAAC,CAAC,GAAGN,KAAK,CAACM,QAAQ,CAAC,CAAC;UAErD,IAAID,SAAS,GAAG,CAAC,IAAKA,SAAS,KAAK,CAAC,IAAIN,KAAK,CAACQ,OAAO,CAAC,CAAC,GAAGP,KAAK,CAACO,OAAO,CAAC,CAAE,EAAE;YACzEJ,GAAG,EAAE;UACT;UACA,OAAOA,GAAG;QACd;MACJ,CAAC;MAED,MAAMK,WAAW,GAAG;QAAE,GAAGjB,WAAW;QAAE,GAAGC;MAAQ,CAAC;MAElD,MAAMiB,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC;MACvC,MAAMI,MAAM,GAAGF,MAAM,CAACE,MAAM,CAACJ,WAAW,CAAC;MAEzC,MAAMK,IAAI,GAAG,IAAIC,QAAQ,CAAC,GAAGL,MAAM,EAAE,yBAAyBpB,OAAO,IAAI,CAAC;MAC1E,OAAOwB,IAAI,CAAC,GAAGD,MAAM,CAAC;IAC1B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,EAAE,UAAU,EAAE1B,OAAO,EAAE,UAAU,EAAEC,OAAO,CAAC;MAC3F,OAAO,OAAO;IAClB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM2B,mBAAmB,GAAG7E,WAAW,CAAEwE,MAA2B,IAAK;IACrE,MAAMM,SAAS,GAAG;MAAE,GAAGN;IAAO,CAAC;IAC/B,IAAIO,UAAU,GAAG,KAAK;IAEtB3C,MAAM,CAAC4C,OAAO,CAACC,KAAK,IAAI;MACpB,IAAIA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,YAAY,IAAIF,KAAK,CAAChC,OAAO,EAAE;QACtD,MAAMC,OAA4B,GAAG,CAAC,CAAC;QACvC,IAAIkC,aAAa,GAAG,IAAI;QAExBH,KAAK,CAACE,YAAY,CAACH,OAAO,CAACK,QAAQ,IAAI;UACnC,MAAMC,WAAW,GAAGlD,MAAM,CAACmD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,QAAQ,CAAC;UACvD,IAAIC,WAAW,IAAID,QAAQ,IAAIb,MAAM,EAAE;YACnCtB,OAAO,CAACoC,WAAW,CAACI,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAGpB,MAAM,CAACa,QAAQ,CAAC;UACpF,CAAC,MAAM;YACHD,aAAa,GAAG,KAAK;UACzB;QACJ,CAAC,CAAC;QAEF,IAAIA,aAAa,EAAE;UACf,MAAMS,aAAa,GAAG7C,WAAW,CAACiC,KAAK,CAAChC,OAAO,EAAEC,OAAO,CAAC;UAEzD,IAAI4B,SAAS,CAACG,KAAK,CAACQ,EAAE,CAAC,KAAKI,aAAa,EAAE;YACvCf,SAAS,CAACG,KAAK,CAACQ,EAAE,CAAC,GAAGI,aAAa;YACnCd,UAAU,GAAG,IAAI;UACrB;QACJ;MACJ;IACJ,CAAC,CAAC;IAEF,IAAIA,UAAU,EAAE;MACZhC,gBAAgB,CAAC+B,SAAS,CAAC;IAC/B;EACJ,CAAC,EAAE,CAAC1C,MAAM,EAAEY,WAAW,CAAC,CAAC;EAEzB,MAAM8C,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAML,EAAE,GAAGpE,MAAM,CAAC,CAAC;IACnB,MAAM4D,KAAY,GAAG;MACjBQ,EAAE;MACFM,IAAI,EAAEzD,QAAQ;MACdoD,KAAK,EAAE,EAAE;MACTM,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAM,CAAC;MAC/BC,OAAO,EAAE5D,QAAQ,KAAK,QAAQ,GAAG,EAAE,GAAG6D;IAC1C,CAAC;IAED,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC,CAACC,QAAQ,CAAC9D,QAAQ,CAAC,EAAE;MACpD2C,KAAK,CAACiB,OAAO,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC;IAC5C;IAEA7D,SAAS,CAAEgE,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEpB,KAAK,CAAC,CAAC;EACzC,CAAC;EAED,MAAMqB,WAAW,GAAGA,CAACb,EAAU,EAAEc,OAAuB,KAAK;IACzDlE,SAAS,CAAEgE,IAAI,IACXA,IAAI,CAACG,GAAG,CAAEvB,KAAK,IAAMA,KAAK,CAACQ,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGR,KAAK;MAAE,GAAGsB;IAAQ,CAAC,GAAGtB,KAAM,CAC5E,CAAC;EACL,CAAC;EAED,MAAMwB,WAAW,GAAIhB,EAAU,IAAK;IAChCpD,SAAS,CAAEgE,IAAI,IAAKA,IAAI,CAACK,MAAM,CAAEzB,KAAK,IAAKA,KAAK,CAACQ,EAAE,KAAKA,EAAE,CAAC,CAAC;IAC5D1C,gBAAgB,CAACsD,IAAI,IAAI;MACrB,MAAMvB,SAAS,GAAG;QAAE,GAAGuB;MAAK,CAAC;MAC7B,OAAOvB,SAAS,CAACW,EAAE,CAAC;MACpB,OAAOX,SAAS;IACpB,CAAC,CAAC;EACN,CAAC;EAED,MAAM6B,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,UAAU,GAAG;MACfC,IAAI,EAAErE,QAAQ;MACdJ,MAAM;MACN0E,SAAS,EAAE,IAAIzD,IAAI,CAAC,CAAC,CAAC0D,WAAW,CAAC;IACtC,CAAC;IAEDC,YAAY,CAACC,OAAO,CAAC,QAAQzE,QAAQ,EAAE,EAAE0E,IAAI,CAACC,SAAS,CAACP,UAAU,CAAC,CAAC;IACpEjE,aAAa,CAAC,KAAK,CAAC;IACpByE,KAAK,CAAC,0BAA0B,CAAC;IACjC/E,SAAS,CAAC,EAAE,CAAC;IACbI,WAAW,CAAC,EAAE,CAAC;IACfM,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,MAAMsE,mBAAmB,GAAGA,CAACC,OAAe,EAAEC,KAAU,KAAK;IACzD,MAAMzC,SAAS,GAAG;MAAE,GAAGhC,aAAa;MAAE,CAACwE,OAAO,GAAGC;IAAM,CAAC;IACxDxE,gBAAgB,CAAC+B,SAAS,CAAC;IAC3BD,mBAAmB,CAACC,SAAS,CAAC;EAClC,CAAC;EAED,MAAM0C,wBAAwB,GAAIC,cAAsB,IAAK;IACzD,OAAOrF,MAAM,CAACsE,MAAM,CAAClB,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgC,cAAc,IAAI,CAACjC,CAAC,CAACN,OAAO,IAAIM,CAAC,CAACE,KAAK,CAACgC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;EAC7F,CAAC;EAED,MAAMC,kBAAkB,GAAI1C,KAAY,IAAK;IAAA,IAAA2C,qBAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,eAAA;IACzC,MAAMR,KAAK,IAAAK,qBAAA,GAAG9E,aAAa,CAACmC,KAAK,CAACQ,EAAE,CAAC,cAAAmC,qBAAA,cAAAA,qBAAA,GAAK3C,KAAK,CAACc,IAAI,KAAK,UAAU,GAAG,EAAE,GAAG,EAAG;IAE9E,IAAId,KAAK,CAACC,OAAO,EAAE;MACf,oBACI1D,OAAA,CAACnB,SAAS;QAEN2H,SAAS;QACTtC,KAAK,EAAE,GAAGT,KAAK,CAACS,KAAK,oBAAqB;QAC1C6B,KAAK,EAAEA,KAAM;QACbU,QAAQ;QACRC,MAAM,EAAC,QAAQ;QACfC,EAAE,EAAE;UAAE,uBAAuB,EAAE;YAAEC,KAAK,EAAE;UAAiB;QAAE;MAAE,GANxDnD,KAAK,CAACQ,EAAE;QAAA5D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOhB,CAAC;IAEV;IAEA,QAAQiD,KAAK,CAACc,IAAI;MACd,KAAK,MAAM;MACX,KAAK,QAAQ;MACb,KAAK,MAAM;QACP,oBACIvE,OAAA,CAACnB,SAAS;UAEN0F,IAAI,EAAEd,KAAK,CAACc,IAAK;UACjBiC,SAAS;UACTtC,KAAK,EAAET,KAAK,CAACS,KAAM;UACnB6B,KAAK,EAAEA,KAAM;UACbc,QAAQ,EAAGC,CAAC,IAAKjB,mBAAmB,CAACpC,KAAK,CAACQ,EAAE,EAAE6C,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAE;UAC/DW,MAAM,EAAC;QAAQ,GANVjD,KAAK,CAACQ,EAAE;UAAA5D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOhB,CAAC;MAGV,KAAK,UAAU;QACX,oBACIR,OAAA,CAACnB,SAAS;UAEN2H,SAAS;UACTtC,KAAK,EAAET,KAAK,CAACS,KAAM;UACnB6B,KAAK,EAAEA,KAAM;UACbc,QAAQ,EAAGC,CAAC,IAAKjB,mBAAmB,CAACpC,KAAK,CAACQ,EAAE,EAAE6C,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAE;UAC/DiB,SAAS;UACTC,IAAI,EAAE,CAAE;UACRP,MAAM,EAAC;QAAQ,GAPVjD,KAAK,CAACQ,EAAE;UAAA5D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQhB,CAAC;MAGV,KAAK,QAAQ;QACT,oBACIR,OAAA,CAACvB,GAAG;UAAgByI,EAAE,EAAE,CAAE;UAAA/G,QAAA,gBACtBH,OAAA,CAAClB,UAAU;YAAAqB,QAAA,EAAEsD,KAAK,CAACS;UAAK;YAAA7D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACtCR,OAAA,CAACpB,MAAM;YACH4H,SAAS;YACTT,KAAK,EAAEA,KAAM;YACbc,QAAQ,EAAGC,CAAC,IAAKjB,mBAAmB,CAACpC,KAAK,CAACQ,EAAE,EAAE6C,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAE;YAAA5F,QAAA,GAAAkG,cAAA,GAE9D5C,KAAK,CAACiB,OAAO,cAAA2B,cAAA,uBAAbA,cAAA,CAAerB,GAAG,CAAC,CAACmC,GAAG,EAAEC,CAAC,kBACvBpH,OAAA,CAACrB,QAAQ;cAASoH,KAAK,EAAEoB,GAAI;cAAAhH,QAAA,EACxBgH;YAAG,GADOC,CAAC;cAAA/G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEN,CACb;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA,GAZHiD,KAAK,CAACQ,EAAE;UAAA5D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAab,CAAC;MAGd,KAAK,OAAO;QACR,oBACIR,OAAA,CAACvB,GAAG;UAAgByI,EAAE,EAAE,CAAE;UAAA/G,QAAA,gBACtBH,OAAA,CAAClB,UAAU;YAAAqB,QAAA,EAAEsD,KAAK,CAACS;UAAK;YAAA7D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,GAAA8F,eAAA,GACrC7C,KAAK,CAACiB,OAAO,cAAA4B,eAAA,uBAAbA,eAAA,CAAetB,GAAG,CAAC,CAACmC,GAAG,EAAEC,CAAC,kBACvBpH,OAAA,CAAChB,gBAAgB;YAEb+G,KAAK,EAAEoB,GAAI;YACXE,OAAO,eACHrH,OAAA,CAACP,KAAK;cACF6H,OAAO,EAAEvB,KAAK,KAAKoB,GAAI;cACvBN,QAAQ,EAAEA,CAAA,KAAMhB,mBAAmB,CAACpC,KAAK,CAACQ,EAAE,EAAEkD,GAAG;YAAE;cAAA9G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtD,CACJ;YACD0D,KAAK,EAAEiD;UAAI,GARNC,CAAC;YAAA/G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAST,CACJ,CAAC;QAAA,GAdIiD,KAAK,CAACQ,EAAE;UAAA5D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeb,CAAC;MAGd,KAAK,UAAU;QACX,oBACIR,OAAA,CAACvB,GAAG;UAAgByI,EAAE,EAAE,CAAE;UAAA/G,QAAA,gBACtBH,OAAA,CAAClB,UAAU;YAAAqB,QAAA,EAAEsD,KAAK,CAACS;UAAK;YAAA7D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,GAAA+F,eAAA,GACrC9C,KAAK,CAACiB,OAAO,cAAA6B,eAAA,uBAAbA,eAAA,CAAevB,GAAG,CAAC,CAACmC,GAAG,EAAEC,CAAC,kBACvBpH,OAAA,CAAChB,gBAAgB;YAEbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;cACLuI,OAAO,EAAEC,KAAK,CAACC,OAAO,CAACzB,KAAK,CAAC,IAAIA,KAAK,CAACnB,QAAQ,CAACuC,GAAG,CAAE;cACrDN,QAAQ,EAAGC,CAAC,IAAK;gBACb,MAAMW,YAAY,GAAGF,KAAK,CAACC,OAAO,CAACzB,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;gBACtD,MAAM2B,QAAQ,GAAGZ,CAAC,CAACC,MAAM,CAACO,OAAO,GAC3B,CAAC,GAAGG,YAAY,EAAEN,GAAG,CAAC,GACtBM,YAAY,CAACvC,MAAM,CAACyC,CAAC,IAAIA,CAAC,KAAKR,GAAG,CAAC;gBACzCtB,mBAAmB,CAACpC,KAAK,CAACQ,EAAE,EAAEyD,QAAQ,CAAC;cAC3C;YAAE;cAAArH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CACJ;YACD0D,KAAK,EAAEiD;UAAI,GAbNC,CAAC;YAAA/G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcT,CACJ,CAAC;QAAA,GAnBIiD,KAAK,CAACQ,EAAE;UAAA5D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBb,CAAC;MAGd;QACI,OAAO,IAAI;IACnB;EACJ,CAAC;EAED,oBACIR,OAAA,CAACvB,GAAG;IAACmJ,CAAC,EAAE,CAAE;IAAAzH,QAAA,gBACNH,OAAA,CAAClB,UAAU;MAAC+I,OAAO,EAAC,IAAI;MAACC,YAAY;MAAA3H,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEtER,OAAA,CAACvB,GAAG;MAACsJ,OAAO,EAAC,MAAM;MAACC,GAAG,EAAE,CAAE;MAACC,UAAU,EAAC,QAAQ;MAACf,EAAE,EAAE,CAAE;MAAA/G,QAAA,gBAClDH,OAAA,CAACpB,MAAM;QAACmH,KAAK,EAAEjF,QAAS;QAAC+F,QAAQ,EAAGC,CAAC,IAAK/F,WAAW,CAAC+F,CAAC,CAACC,MAAM,CAAChB,KAAkB,CAAE;QAAA5F,QAAA,gBAC/EH,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,MAAM;UAAA5F,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eACtCR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,QAAQ;UAAA5F,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eAC1CR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,UAAU;UAAA5F,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eAC9CR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,QAAQ;UAAA5F,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eAC1CR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,OAAO;UAAA5F,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eACxCR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,UAAU;UAAA5F,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,eAC9CR,OAAA,CAACrB,QAAQ;UAACoH,KAAK,EAAC,MAAM;UAAA5F,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACTR,OAAA,CAACtB,MAAM;QAACmJ,OAAO,EAAC,WAAW;QAACK,OAAO,EAAE5D,QAAS;QAAAnE,QAAA,EAAC;MAE/C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRI,MAAM,CAACuH,MAAM,GAAG,CAAC,iBACdnI,OAAA,CAACtB,MAAM;QACHmJ,OAAO,EAAC,UAAU;QAClBK,OAAO,EAAEA,CAAA,KAAM7G,cAAc,CAAC,CAACD,WAAW,CAAE;QAAAjB,QAAA,EAE3CiB,WAAW,GAAG,cAAc,GAAG;MAAc;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAENR,OAAA,CAACvB,GAAG;MAACsJ,OAAO,EAAC,MAAM;MAACC,GAAG,EAAE,CAAE;MAAA7H,QAAA,gBACvBH,OAAA,CAACvB,GAAG;QAAC2J,IAAI,EAAEhH,WAAW,GAAG,CAAC,GAAG,CAAE;QAAAjB,QAAA,gBAC3BH,OAAA,CAAClB,UAAU;UAAC+I,OAAO,EAAC,IAAI;UAACC,YAAY;UAAA3H,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAC/DR,OAAA,CAACX,IAAI;UAAAc,QAAA,EACAS,MAAM,CAACoE,GAAG,CAAC,CAACvB,KAAK,EAAE4E,KAAK;YAAA,IAAAC,mBAAA,EAAAC,eAAA;YAAA,oBACrBvI,OAAA,CAACvB,GAAG;cAAgByI,EAAE,EAAE,CAAE;cAAA/G,QAAA,gBACtBH,OAAA,CAACV,QAAQ;gBAAAa,QAAA,eACLH,OAAA,CAACvB,GAAG;kBAAC+J,KAAK,EAAC,MAAM;kBAAArI,QAAA,gBACbH,OAAA,CAACvB,GAAG;oBAACsJ,OAAO,EAAC,MAAM;oBAACE,UAAU,EAAC,QAAQ;oBAACQ,cAAc,EAAC,eAAe;oBAACvB,EAAE,EAAE,CAAE;oBAAA/G,QAAA,gBACzEH,OAAA,CAAClB,UAAU;sBAAC+I,OAAO,EAAC,IAAI;sBAAA1H,QAAA,GAAC,SAAO,EAACkI,KAAK,GAAG,CAAC,EAAC,KAAG,EAAC5E,KAAK,CAACc,IAAI;oBAAA;sBAAAlE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAa,CAAC,eACvER,OAAA,CAACT,UAAU;sBAAC2I,OAAO,EAAEA,CAAA,KAAMjD,WAAW,CAACxB,KAAK,CAACQ,EAAE,CAAE;sBAAA9D,QAAA,eAC7CH,OAAA,CAACC,UAAU;wBAAAI,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACN,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACZ,CAAC,eAENR,OAAA,CAACnB,SAAS;oBACN2H,SAAS;oBACTtC,KAAK,EAAC,OAAO;oBACb6B,KAAK,EAAEtC,KAAK,CAACS,KAAM;oBACnB2C,QAAQ,EAAGC,CAAC,IAAKhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;sBAAEC,KAAK,EAAE4C,CAAC,CAACC,MAAM,CAAChB;oBAAM,CAAC,CAAE;oBAClEW,MAAM,EAAC;kBAAQ;oBAAArG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAClB,CAAC,EAED,CAACiD,KAAK,CAACC,OAAO,iBACX1D,OAAA,CAACnB,SAAS;oBACN2H,SAAS;oBACTtC,KAAK,EAAC,eAAe;oBACrB6B,KAAK,GAAAuC,mBAAA,GAAE7E,KAAK,CAACiF,YAAY,cAAAJ,mBAAA,cAAAA,mBAAA,GAAI,EAAG;oBAChCzB,QAAQ,EAAGC,CAAC,IAAKhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;sBAAEyE,YAAY,EAAE5B,CAAC,CAACC,MAAM,CAAChB;oBAAM,CAAC,CAAE;oBACzEW,MAAM,EAAC;kBAAQ;oBAAArG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAClB,CACJ,eAEDR,OAAA,CAAChB,gBAAgB;oBACbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;sBACLuI,OAAO,EAAE7D,KAAK,CAACe,UAAU,CAACC,QAAS;sBACnCoC,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;wBAClBO,UAAU,EAAE;0BACR,GAAGf,KAAK,CAACe,UAAU;0BACnBC,QAAQ,EAAEqC,CAAC,CAACC,MAAM,CAACO;wBACvB;sBACJ,CAAC;oBACJ;sBAAAjH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACJ,CACJ;oBACD0D,KAAK,EAAC;kBAAU;oBAAA7D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACnB,CAAC,EAEDiD,KAAK,CAACc,IAAI,KAAK,MAAM,IAAId,KAAK,CAACc,IAAI,KAAK,UAAU,gBAC/CvE,OAAA,CAACvB,GAAG;oBAAA0B,QAAA,gBACAH,OAAA,CAACnB,SAAS;sBACN0F,IAAI,EAAC,QAAQ;sBACbL,KAAK,EAAC,YAAY;sBAClB6B,KAAK,EAAEtC,KAAK,CAACe,UAAU,CAACmE,SAAS,IAAI,EAAG;sBACxC9B,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;wBAClBO,UAAU,EAAE;0BACR,GAAGf,KAAK,CAACe,UAAU;0BACnBmE,SAAS,EAAEC,MAAM,CAAC9B,CAAC,CAACC,MAAM,CAAChB,KAAK;wBACpC;sBACJ,CAAC,CACJ;sBACDW,MAAM,EAAC,QAAQ;sBACfmC,IAAI,EAAC,OAAO;sBACZlC,EAAE,EAAE;wBAAEmC,EAAE,EAAE;sBAAE;oBAAE;sBAAAzI,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACjB,CAAC,eACFR,OAAA,CAACnB,SAAS;sBACN0F,IAAI,EAAC,QAAQ;sBACbL,KAAK,EAAC,YAAY;sBAClB6B,KAAK,EAAEtC,KAAK,CAACe,UAAU,CAACuE,SAAS,IAAI,EAAG;sBACxClC,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;wBAClBO,UAAU,EAAE;0BACR,GAAGf,KAAK,CAACe,UAAU;0BACnBuE,SAAS,EAAEH,MAAM,CAAC9B,CAAC,CAACC,MAAM,CAAChB,KAAK;wBACpC;sBACJ,CAAC,CACJ;sBACDW,MAAM,EAAC,QAAQ;sBACfmC,IAAI,EAAC;oBAAO;sBAAAxI,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACf,CAAC,eACFR,OAAA,CAACvB,GAAG;sBAAA0B,QAAA,gBACAH,OAAA,CAAChB,gBAAgB;wBACbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;0BACLuI,OAAO,EAAE7D,KAAK,CAACe,UAAU,CAACwE,KAAK,IAAI,KAAM;0BACzCnC,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;4BAClBO,UAAU,EAAE;8BACR,GAAGf,KAAK,CAACe,UAAU;8BACnBwE,KAAK,EAAElC,CAAC,CAACC,MAAM,CAACO;4BACpB;0BACJ,CAAC;wBACJ;0BAAAjH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACJ,CACJ;wBACD0D,KAAK,EAAC;sBAAc;wBAAA7D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACvB,CAAC,eACFR,OAAA,CAAChB,gBAAgB;wBACbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;0BACLuI,OAAO,EAAE7D,KAAK,CAACe,UAAU,CAACyE,QAAQ,IAAI,KAAM;0BAC5CpC,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;4BAClBO,UAAU,EAAE;8BACR,GAAGf,KAAK,CAACe,UAAU;8BACnByE,QAAQ,EAAEnC,CAAC,CAACC,MAAM,CAACO;4BACvB;0BACJ,CAAC;wBACJ;0BAAAjH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACJ,CACJ;wBACD0D,KAAK,EAAC;sBAAe;wBAAA7D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACxB,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACD,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACL,CAAC,GACN,IAAI,eAERR,OAAA,CAAChB,gBAAgB;oBACbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;sBACLuI,OAAO,EAAE7D,KAAK,CAACC,OAAO,IAAI,KAAM;sBAChCmD,QAAQ,EAAGC,CAAC,IACRhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;wBAAEP,OAAO,EAAEoD,CAAC,CAACC,MAAM,CAACO;sBAAQ,CAAC;oBACtD;sBAAAjH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACJ,CACJ;oBACD0D,KAAK,EAAC;kBAAmB;oBAAA7D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5B,CAAC,EAEDiD,KAAK,CAACC,OAAO,iBACV1D,OAAA,CAACvB,GAAG;oBAAA0B,QAAA,gBACAH,OAAA,CAAClB,UAAU;sBAAC+I,OAAO,EAAC,WAAW;sBAACC,YAAY;sBAAA3H,QAAA,EAAC;oBAAc;sBAAAE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,EACvEwF,wBAAwB,CAACvC,KAAK,CAACQ,EAAE,CAAC,CAACe,GAAG,CAAClB,WAAW;sBAAA,IAAAoF,mBAAA;sBAAA,oBAC/ClJ,OAAA,CAAChB,gBAAgB;wBAEbqI,OAAO,eACHrH,OAAA,CAACjB,QAAQ;0BACLuI,OAAO,EAAE,EAAA4B,mBAAA,GAAAzF,KAAK,CAACE,YAAY,cAAAuF,mBAAA,uBAAlBA,mBAAA,CAAoBtE,QAAQ,CAACd,WAAW,CAACG,EAAE,CAAC,KAAI,KAAM;0BAC/D4C,QAAQ,EAAGC,CAAC,IAAK;4BACb,MAAMqC,OAAO,GAAG1F,KAAK,CAACE,YAAY,IAAI,EAAE;4BACxC,MAAMoB,OAAO,GAAG+B,CAAC,CAACC,MAAM,CAACO,OAAO,GAC1B,CAAC,GAAG6B,OAAO,EAAErF,WAAW,CAACG,EAAE,CAAC,GAC5BkF,OAAO,CAACjE,MAAM,CAACjB,EAAE,IAAIA,EAAE,KAAKH,WAAW,CAACG,EAAE,CAAC;4BACjDa,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;8BAAEN,YAAY,EAAEoB;4BAAQ,CAAC,CAAC;0BACpD;wBAAE;0BAAA1E,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACL,CACJ;wBACD0D,KAAK,EAAE,GAAGJ,WAAW,CAACI,KAAK,KAAKJ,WAAW,CAACS,IAAI;sBAAI,GAb/CT,WAAW,CAACG,EAAE;wBAAA5D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OActB,CAAC;oBAAA,CACL,CAAC,eAEFR,OAAA,CAACnB,SAAS;sBACN2H,SAAS;sBACTtC,KAAK,EAAC,iBAAiB;sBACvB6B,KAAK,EAAEtC,KAAK,CAAChC,OAAO,IAAI,EAAG;sBAC3BoF,QAAQ,EAAGC,CAAC,IAAKhC,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;wBAAExC,OAAO,EAAEqF,CAAC,CAACC,MAAM,CAAChB;sBAAM,CAAC,CAAE;sBACpEW,MAAM,EAAC,QAAQ;sBACf0C,UAAU,EAAC;oBAAoF;sBAAA/I,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClG,CAAC,EAEDiD,KAAK,CAACE,YAAY,IAAIF,KAAK,CAACE,YAAY,CAACwE,MAAM,GAAG,CAAC,IAAI1E,KAAK,CAAChC,OAAO,iBACjEzB,OAAA,CAACL,KAAK;sBAAC0J,QAAQ,EAAC,MAAM;sBAAC1C,EAAE,EAAE;wBAAE2C,EAAE,EAAE;sBAAE,CAAE;sBAAAnJ,QAAA,GAAC,uBACb,EAACsD,KAAK,CAACE,YAAY,CAACqB,GAAG,CAACf,EAAE,IAAI;wBAC/C,MAAMH,WAAW,GAAGlD,MAAM,CAACmD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;wBACjD,OAAOH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;sBAChE,CAAC,CAAC,CAACmF,IAAI,CAAC,IAAI,CAAC;oBAAA;sBAAAlJ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACV,CACV;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CACR,EAEA,CAACiD,KAAK,CAACc,IAAI,KAAK,QAAQ,IAAId,KAAK,CAACc,IAAI,KAAK,OAAO,IAAId,KAAK,CAACc,IAAI,KAAK,UAAU,KAAK,CAACd,KAAK,CAACC,OAAO,iBAC/F1D,OAAA,CAACvB,GAAG;oBAACyI,EAAE,EAAE,CAAE;oBAAA/G,QAAA,gBACPH,OAAA,CAAClB,UAAU;sBAAC+I,OAAO,EAAC,WAAW;sBAAA1H,QAAA,EAAC;oBAAO;sBAAAE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,GAAA+H,eAAA,GACnD9E,KAAK,CAACiB,OAAO,cAAA6D,eAAA,uBAAbA,eAAA,CAAevD,GAAG,CAAC,CAACwE,MAAM,EAAEC,MAAM,kBAC/BzJ,OAAA,CAACvB,GAAG;sBAAcsJ,OAAO,EAAC,MAAM;sBAACE,UAAU,EAAC,QAAQ;sBAACf,EAAE,EAAE,CAAE;sBAACc,GAAG,EAAE,CAAE;sBAAA7H,QAAA,gBAC/DH,OAAA,CAACnB,SAAS;wBACNqF,KAAK,EAAE,UAAUuF,MAAM,GAAG,CAAC,EAAG;wBAC9B1D,KAAK,EAAEyD,MAAO;wBACd3C,QAAQ,EAAGC,CAAC,IAAK;0BAAA,IAAA4C,eAAA;0BACb,MAAMC,UAAU,GAAG,CAAC,KAAAD,eAAA,GAAIjG,KAAK,CAACiB,OAAO,cAAAgF,eAAA,cAAAA,eAAA,GAAI,EAAE,CAAC,CAAC;0BAC7CC,UAAU,CAACF,MAAM,CAAC,GAAG3C,CAAC,CAACC,MAAM,CAAChB,KAAK;0BACnCjB,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;4BAAES,OAAO,EAAEiF;0BAAW,CAAC,CAAC;wBAClD,CAAE;wBACFd,IAAI,EAAC;sBAAO;wBAAAxI,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACf,CAAC,EACDiD,KAAK,CAACiB,OAAO,IAAIjB,KAAK,CAACiB,OAAO,CAACyD,MAAM,GAAG,CAAC,iBACtCnI,OAAA,CAACT,UAAU;wBACPsJ,IAAI,EAAC,OAAO;wBACZX,OAAO,EAAEA,CAAA,KAAM;0BACX,MAAMyB,UAAU,GAAGlG,KAAK,CAACiB,OAAO,CAAEQ,MAAM,CAAC,CAAC0E,CAAC,EAAExC,CAAC,KAAKA,CAAC,KAAKqC,MAAM,CAAC;0BAChE3E,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;4BAAES,OAAO,EAAEiF;0BAAW,CAAC,CAAC;wBAClD,CAAE;wBAAAxJ,QAAA,eAEFH,OAAA,CAACC,UAAU;0BAAC4J,QAAQ,EAAC;wBAAO;0BAAAxJ,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAE;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACvB,CACf,eACDR,OAAA,CAAChB,gBAAgB;wBACbqI,OAAO,EACH5D,KAAK,CAACc,IAAI,KAAK,UAAU,gBACrBvE,OAAA,CAACjB,QAAQ;0BACLuI,OAAO,EAAEC,KAAK,CAACC,OAAO,CAAC/D,KAAK,CAACe,UAAU,CAAC,gBAAgB,CAAC,CAAC,GACtDf,KAAK,CAACe,UAAU,CAAC,gBAAgB,CAAC,CAACI,QAAQ,CAAC4E,MAAM,CAAC,GAAG,KAAM;0BAChE3C,QAAQ,EAAGC,CAAC,IAAK;4BACb,IAAIgD,cAAc,GAAGvC,KAAK,CAACC,OAAO,CAAC/D,KAAK,CAACe,UAAU,CAAC,gBAAgB,CAAC,CAAC,GAChE,CAAC,GAAGf,KAAK,CAACe,UAAU,CAAC,gBAAgB,CAAC,CAAC,GACvC,EAAE;4BACR,IAAIsC,CAAC,CAACC,MAAM,CAACO,OAAO,EAAE;8BAClBwC,cAAc,CAACC,IAAI,CAACP,MAAM,CAAC;4BAC/B,CAAC,MAAM;8BACHM,cAAc,GAAGA,cAAc,CAAC5E,MAAM,CAAC8E,GAAG,IAAIA,GAAG,KAAKR,MAAM,CAAC;4BACjE;4BACA1E,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;8BAClBO,UAAU,EAAE;gCACR,GAAGf,KAAK,CAACe,UAAU;gCACnBsF;8BACJ;4BACJ,CAAC,CAAC;0BACN;wBAAE;0BAAAzJ,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACL,CAAC,gBAEFR,OAAA,CAACP,KAAK;0BACF6H,OAAO,EAAE7D,KAAK,CAACe,UAAU,CAAC,eAAe,CAAC,KAAKgF,MAAO;0BACtD3C,QAAQ,EAAEA,CAAA,KACN/B,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;4BAClBO,UAAU,EAAE;8BACR,GAAGf,KAAK,CAACe,UAAU;8BACnByF,aAAa,EAAET;4BACnB;0BACJ,CAAC;wBACJ;0BAAAnJ,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACJ,CAER;wBACD0D,KAAK,EAAC;sBAAS;wBAAA7D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAClB,CAAC;oBAAA,GA5DIiJ,MAAM;sBAAApJ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OA6DX,CACR,CAAC,eACFR,OAAA,CAACtB,MAAM;sBACHmJ,OAAO,EAAC,UAAU;sBAClBgB,IAAI,EAAC,OAAO;sBACZX,OAAO,EAAEA,CAAA,KAAM;wBAAA,IAAAgC,eAAA;wBACX,MAAMP,UAAU,GAAG,CAAC,KAAAO,eAAA,GAAIzG,KAAK,CAACiB,OAAO,cAAAwF,eAAA,cAAAA,eAAA,GAAI,EAAE,CAAC,EAAE,UAAUzG,KAAK,CAACiB,OAAO,CAAEyD,MAAM,GAAG,CAAC,EAAE,CAAC;wBACpFrD,WAAW,CAACrB,KAAK,CAACQ,EAAE,EAAE;0BAAES,OAAO,EAAEiF;wBAAW,CAAC,CAAC;sBAClD,CAAE;sBAAAxJ,QAAA,EACL;oBAED;sBAAAE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACR,CACR;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACXR,OAAA,CAACR,OAAO;gBAAAa,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA,GA1PLiD,KAAK,CAACQ,EAAE;cAAA5D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA2Pb,CAAC;UAAA,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAELY,WAAW,IAAIR,MAAM,CAACuH,MAAM,GAAG,CAAC,iBAC7BnI,OAAA,CAACvB,GAAG;QAAC2J,IAAI,EAAE,CAAE;QAAAjI,QAAA,eACTH,OAAA,CAACN,KAAK;UAACyK,SAAS,EAAE,CAAE;UAACxD,EAAE,EAAE;YAAEiB,CAAC,EAAE;UAAE,CAAE;UAAAzH,QAAA,gBAC9BH,OAAA,CAAClB,UAAU;YAAC+I,OAAO,EAAC,IAAI;YAACC,YAAY;YAAA3H,QAAA,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC/DR,OAAA,CAACvB,GAAG;YAAA0B,QAAA,GACCS,MAAM,CAACoE,GAAG,CAACvB,KAAK,IACbA,KAAK,CAACS,KAAK,GAAGiC,kBAAkB,CAAC1C,KAAK,CAAC,GAAG,IAC7C,CAAC,EACD7C,MAAM,CAACwJ,IAAI,CAACpG,CAAC,IAAIA,CAAC,CAACN,OAAO,CAAC,iBACxB1D,OAAA,CAACL,KAAK;cAAC0J,QAAQ,EAAC,MAAM;cAAC1C,EAAE,EAAE;gBAAE2C,EAAE,EAAE;cAAE,CAAE;cAAAnJ,QAAA,EAAC;YAEtC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CACV;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAENR,OAAA,CAACvB,GAAG;MAAC6K,EAAE,EAAE,CAAE;MAAAnJ,QAAA,eACPH,OAAA,CAACtB,MAAM;QAACmJ,OAAO,EAAC,WAAW;QAACjB,KAAK,EAAC,SAAS;QAACsB,OAAO,EAAEA,CAAA,KAAM/G,aAAa,CAAC,IAAI,CAAE;QAACsF,QAAQ,EAAE7F,MAAM,CAACuH,MAAM,KAAK,CAAE;QAAAhI,QAAA,EAAC;MAE/G;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAENR,OAAA,CAACf,MAAM;MAACoL,IAAI,EAAEnJ,UAAW;MAACoJ,OAAO,EAAEA,CAAA,KAAMnJ,aAAa,CAAC,KAAK,CAAE;MAAAhB,QAAA,gBAC1DH,OAAA,CAACd,WAAW;QAAAiB,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACpCR,OAAA,CAACb,aAAa;QAAAgB,QAAA,eACVH,OAAA,CAACnB,SAAS;UACN2H,SAAS;UACTtC,KAAK,EAAC,WAAW;UACjB6B,KAAK,EAAE/E,QAAS;UAChB6F,QAAQ,EAAGC,CAAC,IAAK7F,WAAW,CAAC6F,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAE;UAC7CW,MAAM,EAAC;QAAQ;UAAArG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS,CAAC,eAChBR,OAAA,CAACZ,aAAa;QAAAe,QAAA,gBACVH,OAAA,CAACtB,MAAM;UAACwJ,OAAO,EAAEA,CAAA,KAAM/G,aAAa,CAAC,KAAK,CAAE;UAAAhB,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5DR,OAAA,CAACtB,MAAM;UAACwJ,OAAO,EAAE/C,QAAS;UAAC0C,OAAO,EAAC,WAAW;UAACjB,KAAK,EAAC,SAAS;UAACH,QAAQ,EAAE,CAACzF,QAAS;UAAAb,QAAA,EAAC;QAEpF;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACG,EAAA,CAxkBID,UAAoB;AAAA6J,GAAA,GAApB7J,UAAoB;AA0kB1B,eAAeA,UAAU;AAAC,IAAAD,EAAA,EAAA8J,GAAA;AAAAC,YAAA,CAAA/J,EAAA;AAAA+J,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}