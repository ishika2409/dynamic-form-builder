{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ishik\\\\VS code\\\\Form\\\\dynamic-form-builder\\\\src\\\\components\\\\MyForms.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Box, Typography, List, ListItemButton, ListItemText, Divider } from '@mui/material';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyForms = () => {\n  _s();\n  const [forms, setForms] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    const formKeys = Object.keys(localStorage).filter(key => key.startsWith('form_'));\n    const loadedForms = formKeys.map(key => {\n      const raw = localStorage.getItem(key);\n      if (!raw) return null;\n      try {\n        const data = JSON.parse(raw);\n        return {\n          key,\n          data\n        };\n      } catch (e) {\n        console.error(`Error parsing form ${key}:`, e);\n        return null;\n      }\n    }).filter(Boolean);\n    setForms(loadedForms);\n  }, []);\n  const handleClick = key => {\n    history.push(`/preview/${encodeURIComponent(key)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Saved Forms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: [forms.map(({\n        key,\n        data\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemButton, {\n          onClick: () => handleClick(key),\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: data.name,\n            secondary: `Created: ${new Date(data.createdAt).toLocaleString()}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)), forms.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No saved forms found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(MyForms, \"5fAxUNfe08ieJfKYO8Kuux4k4Fs=\", false, function () {\n  return [useHistory];\n});\n_c = MyForms;\nexport default MyForms;\nvar _c;\n$RefreshReg$(_c, \"MyForms\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","List","ListItemButton","ListItemText","Divider","useHistory","jsxDEV","_jsxDEV","MyForms","_s","forms","setForms","history","formKeys","Object","keys","localStorage","filter","key","startsWith","loadedForms","map","raw","getItem","data","JSON","parse","e","console","error","Boolean","handleClick","push","encodeURIComponent","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","onClick","primary","name","secondary","Date","createdAt","toLocaleString","length","_c","$RefreshReg$"],"sources":["C:/Users/ishik/VS code/Form/dynamic-form-builder/src/components/MyForms.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Typography, List, ListItemButton, ListItemText, Divider } from '@mui/material';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface FormSchema {\r\n  name: string;\r\n  createdAt: string;\r\n  fields: any[];\r\n}\r\n\r\nconst MyForms: React.FC = () => {\r\n  const [forms, setForms] = useState<{ key: string; data: FormSchema }[]>([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const formKeys = Object.keys(localStorage).filter((key) => key.startsWith('form_'));\r\n    const loadedForms = formKeys.map((key) => {\r\n      const raw = localStorage.getItem(key);\r\n      if (!raw) return null;\r\n      try {\r\n        const data = JSON.parse(raw) as FormSchema;\r\n        return { key, data };\r\n      } catch (e) {\r\n        console.error(`Error parsing form ${key}:`, e);\r\n        return null;\r\n      }\r\n    }).filter(Boolean) as { key: string; data: FormSchema }[];\r\n\r\n    setForms(loadedForms);\r\n  }, []);\r\n\r\n  const handleClick = (key: string) => {\r\n    history.push(`/preview/${encodeURIComponent(key)}`);\r\n  };\r\n\r\n  return (\r\n    <Box p={4}>\r\n      <Typography variant=\"h4\" gutterBottom>Saved Forms</Typography>\r\n      <List>\r\n        {forms.map(({ key, data }) => (\r\n          <React.Fragment key={key}>\r\n            <ListItemButton onClick={() => handleClick(key)}>\r\n              <ListItemText\r\n                primary={data.name}\r\n                secondary={`Created: ${new Date(data.createdAt).toLocaleString()}`}\r\n              />\r\n            </ListItemButton>\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n        {forms.length === 0 && (\r\n          <Typography>No saved forms found.</Typography>\r\n        )}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyForms;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,EAAEC,IAAI,EAAEC,cAAc,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAC5F,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9C,MAAMC,OAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAsC,EAAE,CAAC;EAC3E,MAAMc,OAAO,GAAGP,UAAU,CAAC,CAAC;EAE5BR,SAAS,CAAC,MAAM;IACd,MAAMgB,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,CAACC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC;IACnF,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,GAAG,CAAEH,GAAG,IAAK;MACxC,MAAMI,GAAG,GAAGN,YAAY,CAACO,OAAO,CAACL,GAAG,CAAC;MACrC,IAAI,CAACI,GAAG,EAAE,OAAO,IAAI;MACrB,IAAI;QACF,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAe;QAC1C,OAAO;UAAEJ,GAAG;UAAEM;QAAK,CAAC;MACtB,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,sBAAsBX,GAAG,GAAG,EAAES,CAAC,CAAC;QAC9C,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CAACV,MAAM,CAACa,OAAO,CAAwC;IAEzDnB,QAAQ,CAACS,WAAW,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,WAAW,GAAIb,GAAW,IAAK;IACnCN,OAAO,CAACoB,IAAI,CAAC,YAAYC,kBAAkB,CAACf,GAAG,CAAC,EAAE,CAAC;EACrD,CAAC;EAED,oBACEX,OAAA,CAACR,GAAG;IAACmC,CAAC,EAAE,CAAE;IAAAC,QAAA,gBACR5B,OAAA,CAACP,UAAU;MAACoC,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC9DlC,OAAA,CAACN,IAAI;MAAAkC,QAAA,GACFzB,KAAK,CAACW,GAAG,CAAC,CAAC;QAAEH,GAAG;QAAEM;MAAK,CAAC,kBACvBjB,OAAA,CAACX,KAAK,CAAC8C,QAAQ;QAAAP,QAAA,gBACb5B,OAAA,CAACL,cAAc;UAACyC,OAAO,EAAEA,CAAA,KAAMZ,WAAW,CAACb,GAAG,CAAE;UAAAiB,QAAA,eAC9C5B,OAAA,CAACJ,YAAY;YACXyC,OAAO,EAAEpB,IAAI,CAACqB,IAAK;YACnBC,SAAS,EAAE,YAAY,IAAIC,IAAI,CAACvB,IAAI,CAACwB,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;UAAG;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACY,CAAC,eACjBlC,OAAA,CAACH,OAAO;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAPQvB,GAAG;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQR,CACjB,CAAC,EACD/B,KAAK,CAACwC,MAAM,KAAK,CAAC,iBACjB3C,OAAA,CAACP,UAAU;QAAAmC,QAAA,EAAC;MAAqB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC9C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAChC,EAAA,CA9CID,OAAiB;EAAA,QAELH,UAAU;AAAA;AAAA8C,EAAA,GAFtB3C,OAAiB;AAgDvB,eAAeA,OAAO;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}