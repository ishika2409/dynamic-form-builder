{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ishik\\\\VS code\\\\Form\\\\dynamic-form-builder\\\\src\\\\components\\\\CreateForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio } from '@mui/material';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SvgIcon } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DeleteIcon = props => /*#__PURE__*/_jsxDEV(SvgIcon, {\n  ...props,\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 5\n}, this);\n_c = DeleteIcon;\nconst CreateForm = () => {\n  _s();\n  const [fields, setFields] = useState([]);\n  const [newField, setNewField] = useState('text');\n  const [formName, setFormName] = useState('');\n  const [openDialog, setOpenDialog] = useState(false);\n  const addField = () => {\n    const id = uuidv4();\n    const field = {\n      id,\n      type: newField,\n      label: '',\n      validation: {\n        required: false\n      },\n      options: newField === 'select' ? [] : undefined\n    };\n    if (['select', 'radio', 'checkbox'].includes(newField)) {\n      field.options = ['Option 1', 'Option 2'];\n    }\n    setFields(prev => [...prev, field]);\n  };\n  const updateField = (id, updated) => {\n    setFields(prev => prev.map(field => field.id === id ? {\n      ...field,\n      ...updated\n    } : field));\n  };\n  const deleteField = id => {\n    setFields(prev => prev.filter(field => field.id !== id));\n  };\n  const saveForm = () => {\n    const formSchema = {\n      name: formName,\n      fields,\n      createdAt: new Date().toISOString()\n    };\n    localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\n    setOpenDialog(false);\n    alert('Form saved successfully!');\n    setFields([]); // Clear all fields\n    setFormName(''); // Clear form name\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 3,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Dynamic Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      gap: 2,\n      alignItems: \"center\",\n      mb: 3,\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        value: newField,\n        onChange: e => setNewField(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"text\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"number\",\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"textarea\",\n          children: \"Textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"select\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"radio\",\n          children: \"Radio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"checkbox\",\n          children: \"Checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"date\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: addField,\n        children: \"Add Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: fields.map((field, index) => {\n        var _field$defaultValue, _field$parentFields, _field$options;\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 3,\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              width: \"100%\",\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                mb: 1,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: [\"Field #\", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => deleteField(field.id),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Label\",\n                value: field.label,\n                onChange: e => updateField(field.id, {\n                  label: e.target.value\n                }),\n                margin: \"normal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Default Value\",\n                value: (_field$defaultValue = field.defaultValue) !== null && _field$defaultValue !== void 0 ? _field$defaultValue : '',\n                onChange: e => updateField(field.id, {\n                  defaultValue: e.target.value\n                }),\n                margin: \"normal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: field.validation.required,\n                  onChange: e => updateField(field.id, {\n                    validation: {\n                      ...field.validation,\n                      required: e.target.checked\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 41\n                }, this),\n                label: \"Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this), field.type === 'text' || field.type === 'textarea' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  type: \"number\",\n                  label: \"Min Length\",\n                  value: field.validation.minLength || '',\n                  onChange: e => updateField(field.id, {\n                    validation: {\n                      ...field.validation,\n                      minLength: Number(e.target.value)\n                    }\n                  }),\n                  margin: \"normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  type: \"number\",\n                  label: \"Max Length\",\n                  value: field.validation.maxLength || '',\n                  onChange: e => updateField(field.id, {\n                    validation: {\n                      ...field.validation,\n                      maxLength: Number(e.target.value)\n                    }\n                  }),\n                  margin: \"normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: field.validation.email || false,\n                    onChange: e => updateField(field.id, {\n                      validation: {\n                        ...field.validation,\n                        email: e.target.checked\n                      }\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 49\n                  }, this),\n                  label: \"Email Format\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: field.validation.password || false,\n                    onChange: e => updateField(field.id, {\n                      validation: {\n                        ...field.validation,\n                        password: e.target.checked\n                      }\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 49\n                  }, this),\n                  label: \"Password Rule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true) : null, /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: field.derived || false,\n                  onChange: e => updateField(field.id, {\n                    derived: e.target.checked\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 41\n                }, this),\n                label: \"Is Derived Field?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 33\n              }, this), field.derived && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Parent Field IDs (comma separated)\",\n                  value: ((_field$parentFields = field.parentFields) === null || _field$parentFields === void 0 ? void 0 : _field$parentFields.join(',')) || '',\n                  onChange: e => updateField(field.id, {\n                    parentFields: e.target.value.split(',').map(s => s.trim())\n                  }),\n                  margin: \"normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Formula / Logic\",\n                  value: field.formula || '',\n                  onChange: e => updateField(field.id, {\n                    formula: e.target.value\n                  }),\n                  margin: \"normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), (field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && /*#__PURE__*/_jsxDEV(Box, {\n                mb: 2,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: \"Options\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 41\n                }, this), (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.map((option, optIdx) => /*#__PURE__*/_jsxDEV(Box, {\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  mb: 1,\n                  gap: 1,\n                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                    label: `Option ${optIdx + 1}`,\n                    value: option,\n                    onChange: e => {\n                      var _field$options2;\n                      const newOptions = [...((_field$options2 = field.options) !== null && _field$options2 !== void 0 ? _field$options2 : [])];\n                      newOptions[optIdx] = e.target.value;\n                      updateField(field.id, {\n                        options: newOptions\n                      });\n                    },\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 49\n                  }, this), field.options && field.options.length > 2 && /*#__PURE__*/_jsxDEV(IconButton, {\n                    size: \"small\",\n                    onClick: () => {\n                      const newOptions = field.options.filter((_, i) => i !== optIdx);\n                      updateField(field.id, {\n                        options: newOptions\n                      });\n                    },\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                      fontSize: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: field.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: Array.isArray(field.validation['correctAnswers']) ? field.validation['correctAnswers'].includes(option) : false,\n                      onChange: e => {\n                        let correctAnswers = Array.isArray(field.validation['correctAnswers']) ? [...field.validation['correctAnswers']] : [];\n                        if (e.target.checked) {\n                          correctAnswers.push(option);\n                        } else {\n                          correctAnswers = correctAnswers.filter(ans => ans !== option);\n                        }\n                        updateField(field.id, {\n                          validation: {\n                            ...field.validation,\n                            correctAnswers\n                          }\n                        });\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 61\n                    }, this) : /*#__PURE__*/_jsxDEV(Radio, {\n                      checked: field.validation['correctAnswer'] === option,\n                      onChange: () => updateField(field.id, {\n                        validation: {\n                          ...field.validation,\n                          correctAnswer: option\n                        }\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 299,\n                      columnNumber: 61\n                    }, this),\n                    label: \"Correct\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 49\n                  }, this)]\n                }, optIdx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 45\n                }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  size: \"small\",\n                  onClick: () => {\n                    var _field$options3;\n                    const newOptions = [...((_field$options3 = field.options) !== null && _field$options3 !== void 0 ? _field$options3 : []), `Option ${field.options.length + 1}`];\n                    updateField(field.id, {\n                      options: newOptions\n                    });\n                  },\n                  children: \"Add Option\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }, this)]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => setOpenDialog(true),\n      children: \"Save Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => setOpenDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Save Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Form Name\",\n          value: formName,\n          onChange: e => setFormName(e.target.value),\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: saveForm,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !formName,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateForm, \"6QyAmJZX5RFuU7bJ6s6hTy/qmMo=\");\n_c2 = CreateForm;\nexport default CreateForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeleteIcon\");\n$RefreshReg$(_c2, \"CreateForm\");","map":{"version":3,"names":["React","useState","Box","Button","MenuItem","Select","TextField","Typography","Checkbox","FormControlLabel","Dialog","DialogTitle","DialogContent","DialogActions","List","ListItem","IconButton","Divider","Radio","v4","uuidv4","SvgIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","DeleteIcon","props","children","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","CreateForm","_s","fields","setFields","newField","setNewField","formName","setFormName","openDialog","setOpenDialog","addField","id","field","type","label","validation","required","options","undefined","includes","prev","updateField","updated","map","deleteField","filter","saveForm","formSchema","name","createdAt","Date","toISOString","localStorage","setItem","JSON","stringify","alert","p","display","gap","alignItems","mb","value","onChange","e","target","variant","onClick","index","_field$defaultValue","_field$parentFields","_field$options","width","justifyContent","fullWidth","margin","defaultValue","control","checked","minLength","Number","maxLength","email","password","derived","parentFields","join","split","s","trim","formula","option","optIdx","_field$options2","newOptions","size","length","_","i","fontSize","Array","isArray","correctAnswers","push","ans","correctAnswer","_field$options3","color","open","onClose","disabled","_c2","$RefreshReg$"],"sources":["C:/Users/ishik/VS code/Form/dynamic-form-builder/src/components/CreateForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio, } from '@mui/material';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { SvgIcon } from '@mui/material';\r\n\r\nconst DeleteIcon = (props: any) => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\r\n    </SvgIcon>\r\n);\r\n\r\ntype FieldType = 'text' | 'number' | 'textarea' | 'select' | 'radio' | 'checkbox' | 'date';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    id: string;\r\n    type: FieldType;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n}\r\n\r\nconst CreateForm: React.FC = () => {\r\n    const [fields, setFields] = useState<Field[]>([]);\r\n    const [newField, setNewField] = useState<FieldType>('text');\r\n    const [formName, setFormName] = useState('');\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const addField = () => {\r\n        const id = uuidv4();\r\n        const field: Field = {\r\n            id,\r\n            type: newField,\r\n            label: '',\r\n            validation: { required: false },\r\n            options: newField === 'select' ? [] : undefined,\r\n        };\r\n\r\n        if (['select', 'radio', 'checkbox'].includes(newField)) {\r\n            field.options = ['Option 1', 'Option 2'];\r\n        }\r\n\r\n        setFields((prev) => [...prev, field]);\r\n    }\r\n\r\n    const updateField = (id: string, updated: Partial<Field>) => {\r\n        setFields((prev) =>\r\n            prev.map((field) => (field.id === id ? { ...field, ...updated } : field))\r\n        );\r\n    };\r\n\r\n    const deleteField = (id: string) => {\r\n        setFields((prev) => prev.filter((field) => field.id !== id));\r\n    };\r\n\r\n    const saveForm = () => {\r\n        const formSchema = {\r\n            name: formName,\r\n            fields,\r\n            createdAt: new Date().toISOString(),\r\n        };\r\n\r\n        localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\r\n        setOpenDialog(false);\r\n        alert('Form saved successfully!');\r\n        setFields([]); // Clear all fields\r\n        setFormName(''); // Clear form name\r\n    };\r\n\r\n\r\n    return (\r\n        <Box p={3}>\r\n            <h2>Create Dynamic Form</h2>\r\n            <Box display=\"flex\" gap={2} alignItems=\"center\" mb={3}>\r\n                <Select value={newField} onChange={(e) => setNewField(e.target.value as FieldType)}>\r\n                    <MenuItem value=\"text\">Text</MenuItem>\r\n                    <MenuItem value=\"number\">Number</MenuItem>\r\n                    <MenuItem value=\"textarea\">Textarea</MenuItem>\r\n                    <MenuItem value=\"select\">Select</MenuItem>\r\n                    <MenuItem value=\"radio\">Radio</MenuItem>\r\n                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n                    <MenuItem value=\"date\">Date</MenuItem>\r\n                </Select>\r\n                <Button variant=\"contained\" onClick={addField}>\r\n                    Add Field\r\n                </Button>\r\n            </Box>\r\n            <List>\r\n                {fields.map((field, index) => (\r\n                    <Box key={field.id} mb={3}>\r\n                        <ListItem>\r\n                            <Box width=\"100%\">\r\n                                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                                    <Typography variant=\"h6\">Field #{index + 1}</Typography>\r\n                                    <IconButton onClick={() => deleteField(field.id)}>\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                </Box>\r\n\r\n\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Label\"\r\n                                    value={field.label}\r\n                                    onChange={(e) => updateField(field.id, { label: e.target.value })}\r\n                                    margin=\"normal\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Default Value\"\r\n                                    value={field.defaultValue ?? ''}\r\n                                    onChange={(e) => updateField(field.id, { defaultValue: e.target.value })}\r\n                                    margin=\"normal\"\r\n                                />\r\n\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={field.validation.required}\r\n                                            onChange={(e) =>\r\n                                                updateField(field.id, {\r\n                                                    validation: {\r\n                                                        ...field.validation,\r\n                                                        required: e.target.checked,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                    }\r\n                                    label=\"Required\"\r\n                                />\r\n                                <br />\r\n\r\n                                {field.type === 'text' || field.type === 'textarea' ? (\r\n                                    <>\r\n                                        <TextField\r\n                                            type=\"number\"\r\n                                            label=\"Min Length\"\r\n                                            value={field.validation.minLength || ''}\r\n                                            onChange={(e) =>\r\n                                                updateField(field.id, {\r\n                                                    validation: {\r\n                                                        ...field.validation,\r\n                                                        minLength: Number(e.target.value),\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                        <TextField\r\n                                            type=\"number\"\r\n                                            label=\"Max Length\"\r\n                                            value={field.validation.maxLength || ''}\r\n                                            onChange={(e) =>\r\n                                                updateField(field.id, {\r\n                                                    validation: {\r\n                                                        ...field.validation,\r\n                                                        maxLength: Number(e.target.value),\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                        <br />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.validation.email || false}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                email: e.target.checked,\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Email Format\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.validation.password || false}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                password: e.target.checked,\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Password Rule\"\r\n                                        />\r\n                                    </>\r\n                                ) : null}\r\n\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={field.derived || false}\r\n                                            onChange={(e) =>\r\n                                                updateField(field.id, { derived: e.target.checked })\r\n                                            }\r\n                                        />\r\n                                    }\r\n                                    label=\"Is Derived Field?\"\r\n                                />\r\n\r\n                                {field.derived && (\r\n                                    <>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Parent Field IDs (comma separated)\"\r\n                                            value={field.parentFields?.join(',') || ''}\r\n                                            onChange={(e) =>\r\n                                                updateField(field.id, {\r\n                                                    parentFields: e.target.value.split(',').map((s) => s.trim()),\r\n                                                })\r\n                                            }\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Formula / Logic\"\r\n                                            value={field.formula || ''}\r\n                                            onChange={(e) => updateField(field.id, { formula: e.target.value })}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </>\r\n                                )}\r\n\r\n                                {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && (\r\n                                    <Box mb={2}>\r\n                                        <Typography variant=\"subtitle1\">Options</Typography>\r\n                                        {field.options?.map((option, optIdx) => (\r\n                                            <Box key={optIdx} display=\"flex\" alignItems=\"center\" mb={1} gap={1}>\r\n                                                <TextField\r\n                                                    label={`Option ${optIdx + 1}`}\r\n                                                    value={option}\r\n                                                    onChange={(e) => {\r\n                                                        const newOptions = [...(field.options ?? [])];\r\n                                                        newOptions[optIdx] = e.target.value;\r\n                                                        updateField(field.id, { options: newOptions });\r\n                                                    }}\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                {field.options && field.options.length > 2 && (\r\n                                                    <IconButton\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            const newOptions = field.options!.filter((_, i) => i !== optIdx);\r\n                                                            updateField(field.id, { options: newOptions });\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                )}\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        field.type === 'checkbox' ? (\r\n                                                            <Checkbox\r\n                                                                checked={Array.isArray(field.validation['correctAnswers']) ?\r\n                                                                    field.validation['correctAnswers'].includes(option) : false}\r\n                                                                onChange={(e) => {\r\n                                                                    let correctAnswers = Array.isArray(field.validation['correctAnswers'])\r\n                                                                        ? [...field.validation['correctAnswers']]\r\n                                                                        : [];\r\n                                                                    if (e.target.checked) {\r\n                                                                        correctAnswers.push(option);\r\n                                                                    } else {\r\n                                                                        correctAnswers = correctAnswers.filter(ans => ans !== option);\r\n                                                                    }\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            correctAnswers,\r\n                                                                        },\r\n                                                                    });\r\n                                                                }}\r\n                                                            />\r\n                                                        ) : (\r\n                                                            <Radio\r\n                                                                checked={field.validation['correctAnswer'] === option}\r\n                                                                onChange={() =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            correctAnswer: option,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        )\r\n                                                    }\r\n                                                    label=\"Correct\"\r\n                                                />\r\n                                            </Box>\r\n                                        ))}\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                const newOptions = [...(field.options ?? []), `Option ${field.options!.length + 1}`];\r\n                                                updateField(field.id, { options: newOptions });\r\n                                            }}\r\n                                        >\r\n                                            Add Option\r\n                                        </Button>\r\n                                    </Box>\r\n                                )}\r\n                            </Box>\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </Box>\r\n                ))}\r\n            </List>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenDialog(true)}>\r\n                Save Form\r\n            </Button>\r\n\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Save Form</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Form Name\"\r\n                        value={formName}\r\n                        onChange={(e) => setFormName(e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={saveForm} variant=\"contained\" color=\"primary\" disabled={!formName}>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CreateForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}