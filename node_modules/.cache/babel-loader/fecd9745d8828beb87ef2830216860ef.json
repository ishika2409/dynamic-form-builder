{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ishik\\\\VS code\\\\Form\\\\dynamic-form-builder\\\\src\\\\components\\\\PreviewForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, TextField, Typography, Checkbox, FormControlLabel, Select, MenuItem, RadioGroup, Radio, FormHelperText, Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreviewForm = () => {\n  _s();\n  const [schema, setSchema] = useState(null);\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const {\n    formId\n  } = useParams();\n  useEffect(() => {\n    if (!formId) return;\n    const stored = localStorage.getItem(formId);\n    if (stored) {\n      const parsed = JSON.parse(stored);\n      setSchema(parsed);\n      const defaults = {};\n      parsed.fields.forEach(f => {\n        defaults[f.id] = f.defaultValue || '';\n      });\n      setValues(defaults);\n    }\n  }, [formId]);\n  useEffect(() => {\n    if (!schema) return;\n    let updated = {\n      ...values\n    };\n    let hasChanged = false;\n    schema.fields.forEach(field => {\n      var _field$parentFields;\n      if (field.derived && (_field$parentFields = field.parentFields) !== null && _field$parentFields !== void 0 && _field$parentFields.length && field.formula) {\n        const context = field.parentFields.reduce((acc, id) => {\n          acc[id] = values[id];\n          return acc;\n        }, {});\n        try {\n          const computedValue = evalFormula(field.formula, context);\n          if (values[field.id] !== computedValue) {\n            updated[field.id] = computedValue;\n            hasChanged = true;\n          }\n        } catch {\n          updated[field.id] = 'Error';\n          hasChanged = true;\n        }\n      }\n    });\n    if (hasChanged) {\n      setValues(updated);\n    }\n  }, [schema, JSON.stringify(values)]);\n  const evalFormula = (formula, context) => {\n    const safeKeys = Object.keys(context).map(key => `const ${key} = ${JSON.stringify(context[key])};`).join('');\n    const func = new Function(`${safeKeys} return ${formula};`);\n    return func();\n  };\n  const validateField = (field, value) => {\n    const {\n      validation\n    } = field;\n    if (validation.required && !value) return 'This field is required.';\n    if (validation.minLength && value.length < validation.minLength) return `Minimum length is ${validation.minLength}`;\n    if (validation.maxLength && value.length > validation.maxLength) return `Maximum length is ${validation.maxLength}`;\n    if (validation.email && !/^\\S+@\\S+\\.\\S+$/.test(value)) return 'Invalid email format.';\n    if (validation.password && (!/^.{8,}$/.test(value) || !/\\d/.test(value))) return 'Password must be at least 8 characters and contain a number.';\n    return '';\n  };\n  const handleChange = (id, value) => {\n    setValues(prev => ({\n      ...prev,\n      [id]: value\n    }));\n    const field = schema === null || schema === void 0 ? void 0 : schema.fields.find(f => f.id === id);\n    if (field) {\n      const err = validateField(field, value);\n      setErrors(prev => ({\n        ...prev,\n        [id]: err\n      }));\n    }\n  };\n  const handleSubmit = () => {\n    const newErrors = {};\n    schema === null || schema === void 0 ? void 0 : schema.fields.forEach(field => {\n      if (!field.derived) {\n        const err = validateField(field, values[field.id]);\n        if (err) newErrors[field.id] = err;\n      }\n    });\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length === 0) {\n      alert('Form submitted successfully (not actually saved)!');\n    }\n  };\n  if (!schema) return /*#__PURE__*/_jsxDEV(Typography, {\n    children: \"Loading form...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: [\"Preview: \", schema.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: 3,\n      children: [schema.fields.map(field => {\n        var _values$field$id, _errors$field$id, _field$options, _field$options2, _field$options3;\n        const value = (_values$field$id = values[field.id]) !== null && _values$field$id !== void 0 ? _values$field$id : '';\n        const error = (_errors$field$id = errors[field.id]) !== null && _errors$field$id !== void 0 ? _errors$field$id : '';\n        switch (field.type) {\n          case 'text':\n          case 'number':\n          case 'date':\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              type: field.type,\n              label: field.label,\n              value: value,\n              onChange: e => handleChange(field.id, e.target.value),\n              error: !!error,\n              helperText: error,\n              disabled: field.derived\n            }, field.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this);\n          case 'textarea':\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              label: field.label,\n              value: value,\n              onChange: e => handleChange(field.id, e.target.value),\n              error: !!error,\n              helperText: error,\n              multiline: true,\n              rows: 3,\n              disabled: field.derived\n            }, field.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this);\n          case 'select':\n            return /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                children: field.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                fullWidth: true,\n                value: value,\n                onChange: e => handleChange(field.id, e.target.value),\n                disabled: field.derived,\n                children: (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.map((opt, i) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: opt,\n                  children: opt\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n                error: true,\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 47\n              }, this)]\n            }, field.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this);\n          case 'radio':\n            return /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                children: field.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n                value: value,\n                onChange: e => handleChange(field.id, e.target.value),\n                children: (_field$options2 = field.options) === null || _field$options2 === void 0 ? void 0 : _field$options2.map((opt, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: opt,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 92\n                  }, this),\n                  label: opt\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 37\n              }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n                error: true,\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 47\n              }, this)]\n            }, field.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this);\n          case 'checkbox':\n            return /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                children: field.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 37\n              }, this), (_field$options3 = field.options) === null || _field$options3 === void 0 ? void 0 : _field$options3.map((opt, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: (value || []).includes(opt),\n                  onChange: e => {\n                    const checked = e.target.checked;\n                    const newVal = [...(value || [])];\n                    if (checked) newVal.push(opt);else newVal.splice(newVal.indexOf(opt), 1);\n                    handleChange(field.id, newVal);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 49\n                }, this),\n                label: opt\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 41\n              }, this))]\n            }, field.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this);\n          default:\n            return null;\n        }\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(PreviewForm, \"GeCtWJclv5uuZeYdw+JhA2FaWEE=\", false, function () {\n  return [useParams];\n});\n_c = PreviewForm;\nexport default PreviewForm;\nvar _c;\n$RefreshReg$(_c, \"PreviewForm\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Box","TextField","Typography","Checkbox","FormControlLabel","Select","MenuItem","RadioGroup","Radio","FormHelperText","Button","jsxDEV","_jsxDEV","PreviewForm","_s","schema","setSchema","values","setValues","errors","setErrors","formId","stored","localStorage","getItem","parsed","JSON","parse","defaults","fields","forEach","f","id","defaultValue","updated","hasChanged","field","_field$parentFields","derived","parentFields","length","formula","context","reduce","acc","computedValue","evalFormula","stringify","safeKeys","Object","keys","map","key","join","func","Function","validateField","value","validation","required","minLength","maxLength","email","test","password","handleChange","prev","find","err","handleSubmit","newErrors","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","p","variant","gutterBottom","name","component","display","flexDirection","gap","_values$field$id","_errors$field$id","_field$options","_field$options2","_field$options3","error","type","label","onChange","e","target","helperText","disabled","multiline","rows","fullWidth","options","opt","i","control","checked","includes","newVal","push","splice","indexOf","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ishik/VS code/Form/dynamic-form-builder/src/components/PreviewForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Select,\r\n    MenuItem,\r\n    RadioGroup,\r\n    Radio,\r\n    FormHelperText,\r\n    Button,\r\n} from '@mui/material';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n}\r\n\r\ninterface Field {\r\n    id: string;\r\n    type: string;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n}\r\n\r\ninterface FormSchema {\r\n    name: string;\r\n    fields: Field[];\r\n}\r\n\r\nconst PreviewForm: React.FC = () => {\r\n    const [schema, setSchema] = useState<FormSchema | null>(null);\r\n    const [values, setValues] = useState<Record<string, any>>({});\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n    const { formId } = useParams();\r\n\r\n    useEffect(() => {\r\n        if (!formId) return;\r\n    \r\n        const stored = localStorage.getItem(formId);\r\n        if (stored) {\r\n            const parsed = JSON.parse(stored) as FormSchema;\r\n            setSchema(parsed);\r\n        \r\n            const defaults: Record<string, any> = {};\r\n            parsed.fields.forEach((f) => {\r\n                defaults[f.id] = f.defaultValue || '';\r\n            });\r\n            setValues(defaults);\r\n        }\r\n    }, [formId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!schema) return;\r\n\r\n        let updated = { ...values };\r\n        let hasChanged = false;\r\n\r\n        schema.fields.forEach((field) => {\r\n            if (field.derived && field.parentFields?.length && field.formula) {\r\n                const context = field.parentFields.reduce((acc, id) => {\r\n                    acc[id] = values[id];\r\n                    return acc;\r\n                }, {} as Record<string, any>);\r\n\r\n                try {\r\n                    const computedValue = evalFormula(field.formula!, context);\r\n                    if (values[field.id] !== computedValue) {\r\n                        updated[field.id] = computedValue;\r\n                        hasChanged = true;\r\n                    }\r\n                } catch {\r\n                    updated[field.id] = 'Error';\r\n                    hasChanged = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (hasChanged) {\r\n            setValues(updated);\r\n        }\r\n    }, [schema, JSON.stringify(values)]);\r\n\r\n\r\n    const evalFormula = (formula: string, context: Record<string, any>) => {\r\n        const safeKeys = Object.keys(context).map((key) => `const ${key} = ${JSON.stringify(context[key])};`).join('');\r\n        const func = new Function(`${safeKeys} return ${formula};`);\r\n        return func();\r\n    };\r\n\r\n    const validateField = (field: Field, value: any): string => {\r\n        const { validation } = field;\r\n        if (validation.required && !value) return 'This field is required.';\r\n        if (validation.minLength && value.length < validation.minLength)\r\n            return `Minimum length is ${validation.minLength}`;\r\n        if (validation.maxLength && value.length > validation.maxLength)\r\n            return `Maximum length is ${validation.maxLength}`;\r\n        if (validation.email && !/^\\S+@\\S+\\.\\S+$/.test(value)) return 'Invalid email format.';\r\n        if (\r\n            validation.password &&\r\n            (!/^.{8,}$/.test(value) || !/\\d/.test(value))\r\n        )\r\n            return 'Password must be at least 8 characters and contain a number.';\r\n        return '';\r\n    };\r\n\r\n    const handleChange = (id: string, value: any) => {\r\n        setValues((prev) => ({ ...prev, [id]: value }));\r\n        const field = schema?.fields.find((f) => f.id === id);\r\n        if (field) {\r\n            const err = validateField(field, value);\r\n            setErrors((prev) => ({ ...prev, [id]: err }));\r\n        }\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const newErrors: Record<string, string> = {};\r\n        schema?.fields.forEach((field) => {\r\n            if (!field.derived) {\r\n                const err = validateField(field, values[field.id]);\r\n                if (err) newErrors[field.id] = err;\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length === 0) {\r\n            alert('Form submitted successfully (not actually saved)!');\r\n        }\r\n    };\r\n\r\n    if (!schema) return <Typography>Loading form...</Typography>;\r\n\r\n    return (\r\n        <Box p={4}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Preview: {schema.name}\r\n            </Typography>\r\n\r\n            <Box component=\"form\" display=\"flex\" flexDirection=\"column\" gap={3}>\r\n                {schema.fields.map((field) => {\r\n                    const value = values[field.id] ?? '';\r\n                    const error = errors[field.id] ?? '';\r\n\r\n                    switch (field.type) {\r\n                        case 'text':\r\n                        case 'number':\r\n                        case 'date':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    type={field.type}\r\n                                    label={field.label}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error}\r\n                                    disabled={field.derived}\r\n                                />\r\n                            );\r\n\r\n                        case 'textarea':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    label={field.label}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    disabled={field.derived}\r\n                                />\r\n                            );\r\n\r\n                        case 'select':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>{field.label}</Typography>\r\n                                    <Select\r\n                                        fullWidth\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                        disabled={field.derived}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <MenuItem key={i} value={opt}>\r\n                                                {opt}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'radio':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>{field.label}</Typography>\r\n                                    <RadioGroup\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <FormControlLabel key={i} value={opt} control={<Radio />} label={opt} />\r\n                                        ))}\r\n                                    </RadioGroup>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'checkbox':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>{field.label}</Typography>\r\n                                    {field.options?.map((opt, i) => (\r\n                                        <FormControlLabel\r\n                                            key={i}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={(value || []).includes(opt)}\r\n                                                    onChange={(e) => {\r\n                                                        const checked = e.target.checked;\r\n                                                        const newVal = [...(value || [])];\r\n                                                        if (checked) newVal.push(opt);\r\n                                                        else newVal.splice(newVal.indexOf(opt), 1);\r\n                                                        handleChange(field.id, newVal);\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                            label={opt}\r\n                                        />\r\n                                    ))}\r\n                                </Box>\r\n                            );\r\n\r\n                        default:\r\n                            return null;\r\n                    }\r\n                })}\r\n\r\n                <Button variant=\"contained\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PreviewForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}