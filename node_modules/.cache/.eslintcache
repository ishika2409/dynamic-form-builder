[{"C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\index.tsx":"1","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\App.tsx":"2","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\CreateForm.tsx":"3","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\MyForms.tsx":"4","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\PreviewForm.tsx":"5"},{"size":196,"mtime":1754668564578,"results":"6","hashOfConfig":"7"},{"size":697,"mtime":1754671073657,"results":"8","hashOfConfig":"7"},{"size":33156,"mtime":1754757944039,"results":"9","hashOfConfig":"7"},{"size":1786,"mtime":1754677057581,"results":"10","hashOfConfig":"7"},{"size":17162,"mtime":1754761852666,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9li9nw",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\index.tsx",[],"C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\App.tsx",["25"],"import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport CreateForm from './components/CreateForm';\nimport PreviewForm from './components/PreviewForm';\nimport MyForms from './components/MyForms';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/create-form\" component={CreateForm} />\n                <Route path=\"/preview-form/:formId\" component={PreviewForm} />\n                <Route path=\"/my-forms\" component={MyForms} />\n                <Redirect from=\"/\" to=\"/create-form\" exact />\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\CreateForm.tsx",["26"],"import React, { useState, useCallback } from 'react';\r\nimport { Box, Button, MenuItem, Select, TextField, Typography, Checkbox, FormControlLabel, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, IconButton, Divider, Radio, Paper, Alert } from '@mui/material';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { SvgIcon } from '@mui/material';\r\n\r\nconst DeleteIcon = (props: any) => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\r\n    </SvgIcon>\r\n);\r\n\r\ntype FieldType = 'text' | 'number' | 'textarea' | 'select' | 'radio' | 'checkbox' | 'date';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    id: string;\r\n    type: FieldType;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n}\r\n\r\nconst CreateForm: React.FC = () => {\r\n    const [fields, setFields] = useState<Field[]>([]);\r\n    const [newField, setNewField] = useState<FieldType>('text');\r\n    const [formName, setFormName] = useState('');\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [showPreview, setShowPreview] = useState(false);\r\n    const [previewValues, setPreviewValues] = useState<Record<string, any>>({});\r\n    const evalFormula = useCallback((formula: string, context: Record<string, any>) => {\r\n        try {\r\n            const safeContext = { ...context };\r\n\r\n            const helpers = {\r\n                Date: Date,\r\n                Math: Math,\r\n                parseInt: parseInt,\r\n                parseFloat: parseFloat,\r\n                calculateAge: (birthDate: string) => {\r\n                    if (!birthDate) return 0;\r\n                    const today = new Date();\r\n                    const birth = new Date(birthDate);\r\n                    if (isNaN(birth.getTime())) return 0;\r\n\r\n                    let age = today.getFullYear() - birth.getFullYear();\r\n                    const monthDiff = today.getMonth() - birth.getMonth();\r\n\r\n                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n                        age--;\r\n                    }\r\n                    return age;\r\n                }\r\n            };\r\n\r\n            const evalContext = { ...safeContext, ...helpers };\r\n\r\n            const params = Object.keys(evalContext);\r\n            const values = Object.values(evalContext);\r\n\r\n            const func = new Function(...params, `\"use strict\"; return (${formula});`);\r\n            return func(...values);\r\n        } catch (error) {\r\n            console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\r\n            return 'Error';\r\n        }\r\n    }, []);\r\n\r\n    const updateDerivedFields = useCallback((values: Record<string, any>) => {\r\n        const newValues = { ...values };\r\n        let hasChanges = false;\r\n\r\n        fields.forEach(field => {\r\n            if (field.derived && field.parentFields && field.formula) {\r\n                const context: Record<string, any> = {};\r\n                let hasAllParents = true;\r\n\r\n                field.parentFields.forEach(parentId => {\r\n                    const parentField = fields.find(f => f.id === parentId);\r\n                    if (parentField && parentId in values) {\r\n                        context[parentField.label.toLowerCase().replace(/\\s+/g, '_')] = values[parentId];\r\n                    } else {\r\n                        hasAllParents = false;\r\n                    }\r\n                });\r\n\r\n                if (hasAllParents) {\r\n                    const computedValue = evalFormula(field.formula, context);\r\n\r\n                    if (newValues[field.id] !== computedValue) {\r\n                        newValues[field.id] = computedValue;\r\n                        hasChanges = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (hasChanges) {\r\n            setPreviewValues(newValues);\r\n        }\r\n    }, [fields, evalFormula]);\r\n\r\n    const addField = () => {\r\n        const id = uuidv4();\r\n        const field: Field = {\r\n            id,\r\n            type: newField,\r\n            label: '',\r\n            validation: { required: false },\r\n            options: newField === 'select' ? [] : undefined,\r\n        };\r\n\r\n        if (['select', 'radio', 'checkbox'].includes(newField)) {\r\n            field.options = ['Option 1', 'Option 2'];\r\n        }\r\n\r\n        setFields((prev) => [...prev, field]);\r\n    }\r\n\r\n    const updateField = (id: string, updated: Partial<Field>) => {\r\n        setFields((prev) =>\r\n            prev.map((field) => (field.id === id ? { ...field, ...updated } : field))\r\n        );\r\n    };\r\n\r\n    const deleteField = (id: string) => {\r\n        setFields((prev) => prev.filter((field) => field.id !== id));\r\n        setPreviewValues(prev => {\r\n            const newValues = { ...prev };\r\n            delete newValues[id];\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const saveForm = () => {\r\n        const formSchema = {\r\n            name: formName,\r\n            fields,\r\n            createdAt: new Date().toISOString(),\r\n        };\r\n\r\n        localStorage.setItem(`form_${formName}`, JSON.stringify(formSchema));\r\n        setOpenDialog(false);\r\n        alert('Form saved successfully!');\r\n        setFields([]);\r\n        setFormName('');\r\n        setPreviewValues({});\r\n    };\r\n\r\n    const handlePreviewChange = (fieldId: string, value: any) => {\r\n        const newValues = { ...previewValues, [fieldId]: value };\r\n        setPreviewValues(newValues);\r\n        updateDerivedFields(newValues);\r\n    };\r\n\r\n    const getAvailableParentFields = (currentFieldId: string) => {\r\n        return fields.filter(f => f.id !== currentFieldId && !f.derived && f.label.trim() !== '');\r\n    };\r\n\r\n    const renderPreviewField = (field: Field) => {\r\n        const value = previewValues[field.id] ?? (field.type === 'checkbox' ? [] : '');\r\n\r\n        if (field.derived) {\r\n            return (\r\n                <TextField\r\n                    key={field.id}\r\n                    fullWidth\r\n                    label={`${field.label} (Auto-calculated)`}\r\n                    value={value}\r\n                    disabled\r\n                    margin=\"normal\"\r\n                    sx={{ '& .MuiInputBase-input': { color: 'text.secondary' } }}\r\n                />\r\n            );\r\n        }\r\n\r\n        switch (field.type) {\r\n            case 'text':\r\n            case 'number':\r\n            case 'date':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        type={field.type}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'textarea':\r\n                return (\r\n                    <TextField\r\n                        key={field.id}\r\n                        fullWidth\r\n                        label={field.label}\r\n                        value={value}\r\n                        onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        multiline\r\n                        rows={3}\r\n                        margin=\"normal\"\r\n                    />\r\n                );\r\n\r\n            case 'select':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        <Select\r\n                            fullWidth\r\n                            value={value}\r\n                            onChange={(e) => handlePreviewChange(field.id, e.target.value)}\r\n                        >\r\n                            {field.options?.map((opt, i) => (\r\n                                <MenuItem key={i} value={opt}>\r\n                                    {opt}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </Box>\r\n                );\r\n\r\n            case 'radio':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                value={opt}\r\n                                control={\r\n                                    <Radio\r\n                                        checked={value === opt}\r\n                                        onChange={() => handlePreviewChange(field.id, opt)}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            case 'checkbox':\r\n                return (\r\n                    <Box key={field.id} mb={2}>\r\n                        <Typography>{field.label}</Typography>\r\n                        {field.options?.map((opt, i) => (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={Array.isArray(value) && value.includes(opt)}\r\n                                        onChange={(e) => {\r\n                                            const currentValue = Array.isArray(value) ? value : [];\r\n                                            const newValue = e.target.checked\r\n                                                ? [...currentValue, opt]\r\n                                                : currentValue.filter(v => v !== opt);\r\n                                            handlePreviewChange(field.id, newValue);\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                label={opt}\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box p={3}>\r\n            <Typography variant=\"h4\" gutterBottom>Create Dynamic Form</Typography>\r\n\r\n            <Box display=\"flex\" gap={2} alignItems=\"center\" mb={3}>\r\n                <Select value={newField} onChange={(e) => setNewField(e.target.value as FieldType)}>\r\n                    <MenuItem value=\"text\">Text</MenuItem>\r\n                    <MenuItem value=\"number\">Number</MenuItem>\r\n                    <MenuItem value=\"textarea\">Textarea</MenuItem>\r\n                    <MenuItem value=\"select\">Select</MenuItem>\r\n                    <MenuItem value=\"radio\">Radio</MenuItem>\r\n                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n                    <MenuItem value=\"date\">Date</MenuItem>\r\n                </Select>\r\n                <Button variant=\"contained\" onClick={addField}>\r\n                    Add Field\r\n                </Button>\r\n                {fields.length > 0 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => setShowPreview(!showPreview)}\r\n                    >\r\n                        {showPreview ? 'Hide Preview' : 'Show Preview'}\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n\r\n            <Box display=\"flex\" gap={3}>\r\n                <Box flex={showPreview ? 1 : 2}>\r\n                    <Typography variant=\"h6\" gutterBottom>Form Builder</Typography>\r\n                    <List>\r\n                        {fields.map((field, index) => (\r\n                            <Box key={field.id} mb={3}>\r\n                                <ListItem>\r\n                                    <Box width=\"100%\">\r\n                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                                            <Typography variant=\"h6\">Field #{index + 1} - {field.type}</Typography>\r\n                                            <IconButton onClick={() => deleteField(field.id)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </Box>\r\n\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Label\"\r\n                                            value={field.label}\r\n                                            onChange={(e) => updateField(field.id, { label: e.target.value })}\r\n                                            margin=\"normal\"\r\n                                        />\r\n\r\n                                        {!field.derived && (\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"Default Value\"\r\n                                                value={field.defaultValue ?? ''}\r\n                                                onChange={(e) => updateField(field.id, { defaultValue: e.target.value })}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        )}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.validation.required}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                required: e.target.checked,\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Required\"\r\n                                        />\r\n\r\n                                        {field.type === 'text' || field.type === 'textarea' ? (\r\n                                            <Box>\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Min Length\"\r\n                                                    value={field.validation.minLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                minLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    sx={{ mr: 2 }}\r\n                                                />\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    label=\"Max Length\"\r\n                                                    value={field.validation.maxLength || ''}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, {\r\n                                                            validation: {\r\n                                                                ...field.validation,\r\n                                                                maxLength: Number(e.target.value),\r\n                                                            },\r\n                                                        })\r\n                                                    }\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                <Box>\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.email || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            email: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Email Format\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.validation.password || false}\r\n                                                                onChange={(e) =>\r\n                                                                    updateField(field.id, {\r\n                                                                        validation: {\r\n                                                                            ...field.validation,\r\n                                                                            password: e.target.checked,\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                            />\r\n                                                        }\r\n                                                        label=\"Password Rule\"\r\n                                                    />\r\n                                                </Box>\r\n                                            </Box>\r\n                                        ) : null}\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={field.derived || false}\r\n                                                    onChange={(e) =>\r\n                                                        updateField(field.id, { derived: e.target.checked })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Is Derived Field?\"\r\n                                        />\r\n\r\n                                        {field.derived && (\r\n                                            <Box>\r\n                                                <Typography variant=\"subtitle2\" gutterBottom>Parent Fields:</Typography>\r\n                                                {getAvailableParentFields(field.id).map(parentField => (\r\n                                                    <FormControlLabel\r\n                                                        key={parentField.id}\r\n                                                        control={\r\n                                                            <Checkbox\r\n                                                                checked={field.parentFields?.includes(parentField.id) || false}\r\n                                                                onChange={(e) => {\r\n                                                                    const current = field.parentFields || [];\r\n                                                                    const updated = e.target.checked\r\n                                                                        ? [...current, parentField.id]\r\n                                                                        : current.filter(id => id !== parentField.id);\r\n                                                                    updateField(field.id, { parentFields: updated });\r\n                                                                }}\r\n                                                            />\r\n                                                        }\r\n                                                        label={`${parentField.label} (${parentField.type})`}\r\n                                                    />\r\n                                                ))}\r\n\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Formula / Logic\"\r\n                                                    value={field.formula || ''}\r\n                                                    onChange={(e) => updateField(field.id, { formula: e.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    helperText=\"Use field labels in lowercase with underscores (e.g., calculateAge(date_of_birth))\"\r\n                                                />\r\n\r\n                                                {field.parentFields && field.parentFields.length > 0 && field.formula && (\r\n                                                    <Alert severity=\"info\" sx={{ mt: 1 }}>\r\n                                                        Available variables: {field.parentFields.map(id => {\r\n                                                            const parentField = fields.find(f => f.id === id);\r\n                                                            return parentField?.label.toLowerCase().replace(/\\s+/g, '_');\r\n                                                        }).join(', ')}\r\n                                                    </Alert>\r\n                                                )}\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && !field.derived && (\r\n                                            <Box mb={2}>\r\n                                                <Typography variant=\"subtitle1\">Options</Typography>\r\n                                                {field.options?.map((option, optIdx) => (\r\n                                                    <Box key={optIdx} display=\"flex\" alignItems=\"center\" mb={1} gap={1}>\r\n                                                        <TextField\r\n                                                            label={`Option ${optIdx + 1}`}\r\n                                                            value={option}\r\n                                                            onChange={(e) => {\r\n                                                                const newOptions = [...(field.options ?? [])];\r\n                                                                newOptions[optIdx] = e.target.value;\r\n                                                                updateField(field.id, { options: newOptions });\r\n                                                            }}\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                        {field.options && field.options.length > 2 && (\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                onClick={() => {\r\n                                                                    const newOptions = field.options!.filter((_, i) => i !== optIdx);\r\n                                                                    updateField(field.id, { options: newOptions });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteIcon fontSize=\"small\" />\r\n                                                            </IconButton>\r\n                                                        )}\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                field.type === 'checkbox' ? (\r\n                                                                    <Checkbox\r\n                                                                        checked={Array.isArray(field.validation['correctAnswers']) ?\r\n                                                                            field.validation['correctAnswers'].includes(option) : false}\r\n                                                                        onChange={(e) => {\r\n                                                                            let correctAnswers = Array.isArray(field.validation['correctAnswers'])\r\n                                                                                ? [...field.validation['correctAnswers']]\r\n                                                                                : [];\r\n                                                                            if (e.target.checked) {\r\n                                                                                correctAnswers.push(option);\r\n                                                                            } else {\r\n                                                                                correctAnswers = correctAnswers.filter(ans => ans !== option);\r\n                                                                            }\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswers,\r\n                                                                                },\r\n                                                                            });\r\n                                                                        }}\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <Radio\r\n                                                                        checked={field.validation['correctAnswer'] === option}\r\n                                                                        onChange={() =>\r\n                                                                            updateField(field.id, {\r\n                                                                                validation: {\r\n                                                                                    ...field.validation,\r\n                                                                                    correctAnswer: option,\r\n                                                                                },\r\n                                                                            })\r\n                                                                        }\r\n                                                                    />\r\n                                                                )\r\n                                                            }\r\n                                                            label=\"Correct\"\r\n                                                        />\r\n                                                    </Box>\r\n                                                ))}\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const newOptions = [...(field.options ?? []), `Option ${field.options!.length + 1}`];\r\n                                                        updateField(field.id, { options: newOptions });\r\n                                                    }}\r\n                                                >\r\n                                                    Add Option\r\n                                                </Button>\r\n                                            </Box>\r\n                                        )}\r\n                                    </Box>\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </Box>\r\n                        ))}\r\n                    </List>\r\n                </Box>\r\n\r\n                {showPreview && fields.length > 0 && (\r\n                    <Box flex={1}>\r\n                        <Paper elevation={2} sx={{ p: 3 }}>\r\n                            <Typography variant=\"h6\" gutterBottom>Live Preview</Typography>\r\n                            <Box>\r\n                                {fields.map(field => (\r\n                                    field.label ? renderPreviewField(field) : null\r\n                                ))}\r\n                                {fields.some(f => f.derived) && (\r\n                                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                                        Derived fields will auto-update as you change parent fields above.\r\n                                    </Alert>\r\n                                )}\r\n                            </Box>\r\n                        </Paper>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n\r\n            <Box mt={3}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenDialog(true)} disabled={fields.length === 0}>\r\n                    Save Form\r\n                </Button>\r\n            </Box>\r\n\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Save Form</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Form Name\"\r\n                        value={formName}\r\n                        onChange={(e) => setFormName(e.target.value)}\r\n                        margin=\"normal\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={saveForm} variant=\"contained\" color=\"primary\" disabled={!formName}>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CreateForm;","C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\MyForms.tsx",[],"C:\\Users\\ishik\\VS code\\Form\\dynamic-form-builder\\src\\components\\PreviewForm.tsx",["27","28"],"import React, { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Select,\r\n    MenuItem,\r\n    RadioGroup,\r\n    Radio,\r\n    FormHelperText,\r\n    Button,\r\n    Alert,\r\n} from '@mui/material';\r\n\r\ninterface Validation {\r\n    required: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    email?: boolean;\r\n    password?: boolean;\r\n    correctAnswers?: string[];\r\n    correctAnswer?: string;\r\n}\r\n\r\ninterface Field {\r\n    derived?: boolean;\r\n    parentFields?: string[];\r\n    formula?: string;\r\n    id: string;\r\n    type: string;\r\n    label: string;\r\n    defaultValue?: string;\r\n    options?: string[];\r\n    validation: Validation;\r\n}\r\n\r\ninterface FormSchema {\r\n    name: string;\r\n    fields: Field[];\r\n}\r\n\r\nconst PreviewForm: React.FC = () => {\r\n    const [schema, setSchema] = useState<FormSchema | null>(null);\r\n    const [values, setValues] = useState<Record<string, any>>({});\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [result, setResult] = useState<string | null>(null);\r\n\r\n    const { formId } = useParams<{ formId: string }>();\r\n\r\n    useEffect(() => {\r\n        if (!formId) return;\r\n\r\n        const stored = localStorage.getItem(formId);\r\n        if (stored) {\r\n            const parsed = JSON.parse(stored) as FormSchema;\r\n            setSchema(parsed);\r\n\r\n            const defaults: Record<string, any> = {};\r\n            parsed.fields.forEach((f) => {\r\n                if (!f.derived) {\r\n                    defaults[f.id] = f.defaultValue || (f.type === 'checkbox' ? [] : '');\r\n                }\r\n            });\r\n            setValues(defaults);\r\n        }\r\n    }, [formId]);\r\n\r\n    const evalFormula = useCallback((formula: string, context: Record<string, any>) => {\r\n        try {\r\n            let contextValues = Object.values(context);\r\n            if (contextValues.some(val => val === '' || val === undefined || val === null)) {\r\n                return '';\r\n            }\r\n\r\n            const safeContext = { ...context };\r\n\r\n            const helpers = {\r\n                Date: Date,\r\n                Math: Math,\r\n                parseInt: parseInt,\r\n                parseFloat: parseFloat,\r\n                calculateAge: (birthDate: string) => {\r\n                    if (!birthDate) return 0;\r\n                    const today = new Date();\r\n                    const birth = new Date(birthDate);\r\n                    if (isNaN(birth.getTime())) return 0;\r\n\r\n                    let age = today.getFullYear() - birth.getFullYear();\r\n                    const monthDiff = today.getMonth() - birth.getMonth();\r\n\r\n                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n                        age--;\r\n                    }\r\n                    return age;\r\n                }\r\n            };\r\n\r\n            const evalContext = { ...safeContext, ...helpers };\r\n\r\n            const params = Object.keys(evalContext);\r\n            contextValues = Object.values(evalContext);\r\n\r\n            const func = new Function(...params, `\"use strict\"; return (${formula});`);\r\n            return func(...contextValues);\r\n        } catch (error) {\r\n            console.error('Formula evaluation error:', error, 'Formula:', formula, 'Context:', context);\r\n            return 'Error';\r\n        }\r\n    }, []);\r\n\r\n    const updateDerivedFields = useCallback((currentValues: Record<string, any>) => {\r\n        if (!schema) return currentValues;\r\n\r\n        const newValues = { ...currentValues };\r\n        let hasChanges = false;\r\n\r\n        schema.fields.forEach(field => {\r\n            if (field.derived && field.parentFields && field.formula) {\r\n                const context: Record<string, any> = {};\r\n                let hasAllParents = true;\r\n\r\n                field.parentFields.forEach(parentId => {\r\n                    const parentField = schema.fields.find(f => f.id === parentId);\r\n                    if (parentField && parentId in currentValues) {\r\n                        const variableName = parentField.label.toLowerCase().replace(/\\s+/g, '_');\r\n                        context[variableName] = currentValues[parentId];\r\n                    } else {\r\n                        hasAllParents = false;\r\n                    }\r\n                });\r\n\r\n                if (hasAllParents) {\r\n                    const computedValue = evalFormula(field.formula, context);\r\n                    \r\n                    if (newValues[field.id] !== computedValue) {\r\n                        newValues[field.id] = computedValue;\r\n                        hasChanges = true;\r\n                    }\r\n                } else {\r\n                    if (field.id in newValues) {\r\n                        delete newValues[field.id];\r\n                        hasChanges = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return hasChanges ? newValues : currentValues;\r\n    }, [schema, evalFormula]);\r\n\r\n    useEffect(() => {\r\n        if (!schema || Object.keys(values).length === 0) return;\r\n\r\n        const updatedValues = updateDerivedFields(values);\r\n        if (updatedValues !== values) {\r\n            setValues(updatedValues);\r\n        }\r\n    }, [schema, values, updateDerivedFields]);\r\n\r\n    const validateField = useCallback((field: Field, value: any): string => {\r\n        const { validation } = field;\r\n\r\n        if (validation.required && (!value || (Array.isArray(value) && value.length === 0))) {\r\n            return 'This field is required.';\r\n        }\r\n\r\n        if (typeof value === 'string') {\r\n            if (validation.minLength && value.length < validation.minLength) {\r\n                return `Minimum length is ${validation.minLength}`;\r\n            }\r\n            if (validation.maxLength && value.length > validation.maxLength) {\r\n                return `Maximum length is ${validation.maxLength}`;\r\n            }\r\n            if (validation.email && value && !/^\\S+@\\S+\\.\\S+$/.test(value)) {\r\n                return 'Invalid email format.';\r\n            }\r\n            if (validation.password && value &&\r\n                (!/^.{8,}$/.test(value) || !/\\d/.test(value))) {\r\n                return 'Password must be at least 8 characters and contain a number.';\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }, []);\r\n\r\n    const handleChange = useCallback((id: string, value: any) => {\r\n        const newValues = { ...values, [id]: value };\r\n        \r\n        const updatedValues = updateDerivedFields(newValues);\r\n        setValues(updatedValues);\r\n\r\n        const field = schema?.fields.find(f => f.id === id);\r\n        if (field && !field.derived) {\r\n            const err = validateField(field, value);\r\n            setErrors(prev => ({ ...prev, [id]: err }));\r\n        }\r\n    }, [values, updateDerivedFields, schema, validateField]);\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setSubmitted(true);\r\n\r\n        const newErrors: Record<string, string> = {};\r\n\r\n        schema?.fields.forEach(field => {\r\n            if (!field.derived) {\r\n                const err = validateField(field, values[field.id]);\r\n                if (err) newErrors[field.id] = err;\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n\r\n        let correct = true;\r\n        let feedback = '';\r\n\r\n        schema?.fields.forEach(field => {\r\n            const fieldValue = values[field.id];\r\n\r\n            if ((field.type === 'radio' || field.type === 'select') && field.validation.correctAnswer) {\r\n                if (fieldValue !== field.validation.correctAnswer) {\r\n                    correct = false;\r\n                    feedback += `${field.label}: Incorrect answer.\\n`;\r\n                }\r\n            }\r\n\r\n            if (field.type === 'checkbox' && Array.isArray(field.validation.correctAnswers)) {\r\n                const userAnswers = Array.isArray(fieldValue) ? fieldValue : [];\r\n                const correctAnswers = field.validation.correctAnswers;\r\n\r\n                if (userAnswers.length !== correctAnswers.length ||\r\n                    !correctAnswers.every(ans => userAnswers.includes(ans))) {\r\n                    correct = false;\r\n                    feedback += `${field.label}: Incorrect answer.\\n`;\r\n                }\r\n            }\r\n        });\r\n\r\n        setResult(correct ? 'All answers are correct!' : feedback || 'Some answers are incorrect.');\r\n\r\n        if (Object.keys(newErrors).length === 0) {\r\n            console.log('Form Values:', values);\r\n            alert('Form submitted successfully (check console for values)!');\r\n        }\r\n    };\r\n\r\n    if (!schema) {\r\n        return <Typography>Loading form...</Typography>;\r\n    }\r\n\r\n    return (\r\n        <Box p={4}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Preview: {schema.name}\r\n            </Typography>\r\n\r\n            <Box component=\"form\" display=\"flex\" flexDirection=\"column\" gap={3} onSubmit={handleSubmit}>\r\n                {schema.fields.map(field => {\r\n                    const value = values[field.id] ?? (field.type === 'checkbox' ? [] : '');\r\n                    const error = errors[field.id] ?? '';\r\n                    const isDisabled = field.derived || false;\r\n\r\n                    switch (field.type) {\r\n                        case 'text':\r\n                        case 'number':\r\n                        case 'date':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    type={field.type}\r\n                                    label={`${field.label}${isDisabled ? ' (Auto-calculated)' : ''}`}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error || (isDisabled ? 'This field is automatically calculated' : '')}\r\n                                    disabled={isDisabled}\r\n                                    sx={isDisabled ? { '& .MuiInputBase-input': { color: 'text.secondary' } } : {}}\r\n                                />\r\n                            );\r\n\r\n                        case 'textarea':\r\n                            return (\r\n                                <TextField\r\n                                    key={field.id}\r\n                                    label={`${field.label}${isDisabled ? ' (Auto-calculated)' : ''}`}\r\n                                    value={value}\r\n                                    onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    error={!!error}\r\n                                    helperText={error || (isDisabled ? 'This field is automatically calculated' : '')}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    disabled={isDisabled}\r\n                                    sx={isDisabled ? { '& .MuiInputBase-input': { color: 'text.secondary' } } : {}}\r\n                                />\r\n                            );\r\n\r\n                        case 'select':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    <Select\r\n                                        fullWidth\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                        disabled={isDisabled}\r\n                                        sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <MenuItem key={i} value={opt}>\r\n                                                {opt}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'radio':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    <RadioGroup\r\n                                        value={value}\r\n                                        onChange={(e) => handleChange(field.id, e.target.value)}\r\n                                    >\r\n                                        {field.options?.map((opt, i) => (\r\n                                            <FormControlLabel\r\n                                                key={i}\r\n                                                value={opt}\r\n                                                control={<Radio disabled={isDisabled} />}\r\n                                                label={opt}\r\n                                                sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                            />\r\n                                        ))}\r\n                                    </RadioGroup>\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        case 'checkbox':\r\n                            return (\r\n                                <Box key={field.id}>\r\n                                    <Typography>\r\n                                        {field.label}{isDisabled ? ' (Auto-calculated)' : ''}\r\n                                    </Typography>\r\n                                    {field.options?.map((opt, i) => (\r\n                                        <FormControlLabel\r\n                                            key={i}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={Array.isArray(value) && value.includes(opt)}\r\n                                                    onChange={(e) => {\r\n                                                        if (!isDisabled) {\r\n                                                            const checked = e.target.checked;\r\n                                                            const currentValue = Array.isArray(value) ? value : [];\r\n                                                            const newValue = checked\r\n                                                                ? [...currentValue, opt]\r\n                                                                : currentValue.filter(v => v !== opt);\r\n                                                            handleChange(field.id, newValue);\r\n                                                        }\r\n                                                    }}\r\n                                                    disabled={isDisabled}\r\n                                                />\r\n                                            }\r\n                                            label={opt}\r\n                                            sx={isDisabled ? { color: 'text.secondary' } : {}}\r\n                                        />\r\n                                    ))}\r\n                                    {error && <FormHelperText error>{error}</FormHelperText>}\r\n                                    {isDisabled && <FormHelperText>This field is automatically calculated</FormHelperText>}\r\n                                </Box>\r\n                            );\r\n\r\n                        default:\r\n                            return null;\r\n                    }\r\n                })}\r\n\r\n                <Button variant=\"contained\" type=\"submit\" size=\"large\">\r\n                    Submit\r\n                </Button>\r\n            </Box>\r\n\r\n            {submitted && result && (\r\n                <Box mt={2}>\r\n                    <Alert severity={result === 'All answers are correct!' ? 'success' : 'error'}>\r\n                        {result}\r\n                    </Alert>\r\n                </Box>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PreviewForm;",{"ruleId":"29","severity":1,"message":"30","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":25},{"ruleId":"33","severity":1,"message":"34","line":73,"column":26,"nodeType":"35","messageId":"36","endLine":73,"endColumn":87},{"ruleId":"29","severity":1,"message":"37","line":1,"column":51,"nodeType":"31","messageId":"32","endLine":1,"endColumn":58},{"ruleId":"33","severity":1,"message":"34","line":107,"column":26,"nodeType":"35","messageId":"36","endLine":107,"endColumn":87},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","'useMemo' is defined but never used."]